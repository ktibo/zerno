
#Область ОписаниеПеременных

Перем HTTP;
Перем Фабрика;
Перем КомпонентаКриптографии;
Перем СоответствиеПространствИмен;
Перем ЖурналЗапросов;
Перем pageLength; // Размер страницы в результате запроса

Перем ОсновнаяФирма;
Перем ЭтоКЦ;
Перем МассивОшибок;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура ПрименитьНастройку() Экспорт
	
	Попытка
		
		// Общие настройки
		
		НастройкиЗерно = Константы.НастройкиЗерно.Получить().Получить();
		Если НастройкиЗерно.Свойство("СотрудникиТехподдержки") Тогда
			СотрудникиТехподдержки = НастройкиЗерно.СотрудникиТехподдержки;
		КонецЕсли;
		
		// Настройки филиала
		
		Настройки = ХранилищеВариантовОтчетов.Загрузить("Зерно","Настройки",,"Все");
		Если ЗначениеЗаполнено(Настройки) И Настройки.Свойство("Сертификаты") Тогда
			Сертификаты.Загрузить(Настройки.Сертификаты);
			Сертификаты.Сортировать("Фирма");
		КонецЕсли;
		
	Исключение
		ЗафиксироватьОшибку("Ошибка получения настроек!", ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьОбработку() Экспорт
	
	ФирмыДляРобота = Новый Массив;
	Для Каждого Стр Из Сертификаты Цикл
		Если ЗначениеЗаполнено(Стр.Фирма) Тогда
			ФирмыДляРобота.Добавить(Стр.Фирма);
		КонецЕсли;
	КонецЦикла;
	Если ФирмыДляРобота.Количество() = 0 Тогда
		ЗафиксироватьОшибку("Не указаны фирмы для робота!");
		Возврат;
	КонецЕсли;
	
	ОтпечатокСертификата = Сертификат(); // Получем сертификат по умолчанию (для синхронизации партий)
	
	Если НЕ ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		ЗафиксироватьОшибку("Не определен сертификат по умолчанию для робота!");
		Возврат;
	КонецЕсли;
	
	// Создаем задачи на СДИЗ
	
	НачПериодаДокументы = НачалоДня(ТекущаяДата());
	КонПериодаДокументы = КонецДня(ТекущаяДата());
	
	Параметры = Новый Структура();
	Параметры.Вставить("НачПериода", НачПериодаДокументы);
	Параметры.Вставить("КонПериода", КонПериодаДокументы);
	Параметры.Вставить("Фирмы", ФирмыДляРобота);
	Параметры.Вставить("ВключатьОбработанныеДокументы", Ложь);	
	
	ВыбранныеДокументы = ТаблицаДокументов.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	СоздатьЗадачи(ВыбранныеДокументы);
	
	
	Параметры = Новый Структура();
	Параметры.Вставить("НачПериода", НачПериодаДокументы);
	Параметры.Вставить("КонПериода", КонПериодаДокументы);
	
	СтатусыЗадачСДИЗ = Новый Массив;
	СтатусыЗадачСДИЗ.Добавить(СтатусЗадачаОжидание());
	СтатусыЗадачСДИЗ.Добавить(СтатусЗадачаОшибка());
	
	Параметры.Вставить("СтатусыЗадачСДИЗ", СтатусыЗадачСДИЗ);
	
	ОбновитьТаблицуЗадачСДИЗ(Параметры);
	
	ВыбранныеЗадачи = ТаблицаЗадачСДИЗ.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	СоздаватьПартииИзОстатковАвтоматически = Истина;
	
	СоздатьСДИЗы(ВыбранныеЗадачи);
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура СинхронизироватьПартии(ВыбранныеЗадачи = Неопределено) Экспорт
	
	Если НЕ ЭтоКЦ И НЕ ЗначениеЗаполнено(ВыбранныеЗадачи) Тогда
		#Если Клиент Тогда
			Сообщить("На филиале синхронизация партий выполняется по фирмам у выбранных задач.");
		#КонецЕсли
		ВызватьИсключение "Не выбраны задачи!";
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("Выполняется синхронизация партий...");
	#КонецЕсли
	
	// Определяем начало периода выборки партий из ФГИЗ Зерно
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Зерно_ПартииППЗ.Дата) КАК Дата
	|ИЗ
	|	РегистрСведений.Зерно_ПартииППЗ КАК Зерно_ПартииППЗ
	|ГДЕ
	|	Зерно_ПартииППЗ.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Статус", СтатусПодписан());
	
	ДатаНачала = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0)[0];
	ДатаНачала = ?(НЕ ЗначениеЗаполнено(ДатаНачала), НачалоГода(ТекущаяДата()), ДатаНачала);
	
	ТаблицаПартий.Очистить();
	
	Параметры = Новый Структура();
	Параметры.Вставить("pageNumber", 0);
	Параметры.Вставить("dateFrom", ДатаНачала);
	Параметры.Вставить("dateTo", '00010101');
	Параметры.Вставить("status", СтатусПодписан());
	Параметры.Вставить("ОчищатьТаблицу", Ложь);
	Параметры.Вставить("Синхронизация", Истина);
	
	hasMore = Истина; // Есть другие страницы
	
	// Считываем выборку партий постранично
	Пока hasMore Цикл
		ОбновитьТаблицуПартий(Параметры, hasMore);
		Параметры.pageNumber = Параметры.pageNumber + 1; // Переходим на следующую страницу
	КонецЦикла;	
	
	Если ТаблицаПартий.Количество() = 0 Тогда
		ВызватьИсключение "Отсутствуют партии в выборке!";
	КонецЕсли;
	
	// Синхронизируем полученные партии с партиями в БД
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПартий.НомерПартии КАК НомерПартии,
	|	ТаблицаПартий.Дата КАК Дата,
	|	ТаблицаПартий.ДатаИзготовления КАК ДатаИзготовления,
	|	ТаблицаПартий.МассаПервоначальная КАК МассаПервоначальная,
	|	ТаблицаПартий.МассаДоступная КАК МассаДоступная,
	|	ТаблицаПартий.Статус КАК Статус,
	|	ТаблицаПартий.ОКПД2 КАК ОКПД2,
	|	ТаблицаПартий.Производитель КАК Производитель,
	|	ТаблицаПартий.Фирма КАК Фирма,
	|	ТаблицаПартий.Manufacturer_Address КАК Manufacturer_Address,
	|	ТаблицаПартий.StoragePlace_Address КАК StoragePlace_Address,
	|	ТаблицаПартий.ДополнительныеСвойства КАК ДополнительныеСвойства
	|ПОМЕСТИТЬ ВТАктуальныеПартии
	|ИЗ
	|	&ТаблицаПартий КАК ТаблицаПартий
	|ГДЕ
	|	(&ЭтоКЦ
	|			ИЛИ ТаблицаПартий.Фирма В (&Фирмы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Зерно_ПартииППЗ.НомерПартии КАК НомерПартии,
	|	Зерно_ПартииППЗ.Дата КАК Дата,
	|	Зерно_ПартииППЗ.ДатаИзготовления КАК ДатаИзготовления,
	|	Зерно_ПартииППЗ.МассаПервоначальная КАК МассаПервоначальная,
	|	Зерно_ПартииППЗ.МассаДоступная КАК МассаДоступная,
	|	Зерно_ПартииППЗ.Статус КАК Статус,
	|	Зерно_ПартииППЗ.ОКПД2 КАК ОКПД2,
	|	Зерно_ПартииППЗ.Производитель КАК Производитель,
	|	Зерно_ПартииППЗ.Фирма КАК Фирма,
	|	Зерно_ПартииППЗ.Manufacturer_Address КАК Manufacturer_Address,
	|	Зерно_ПартииППЗ.StoragePlace_Address КАК StoragePlace_Address,
	|	Зерно_ПартииППЗ.ДополнительныеСвойства КАК ДополнительныеСвойства
	|ПОМЕСТИТЬ ВТПартииБД
	|ИЗ
	|	РегистрСведений.Зерно_ПартииППЗ КАК Зерно_ПартииППЗ
	|ГДЕ
	|	Зерно_ПартииППЗ.Статус = &Статус
	|	И (&ЭтоКЦ
	|			ИЛИ Зерно_ПартииППЗ.Фирма В (&Фирмы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НЕ ВТАктуальныеПартии.НомерПартии ЕСТЬ NULL КАК ЕстьПартияИзФГИСЗерно,
	|	НЕ ВТПартииБД.НомерПартии ЕСТЬ NULL КАК ЕстьПартияИзБД,
	|	ЕСТЬNULL(ВТАктуальныеПартии.НомерПартии, ВТПартииБД.НомерПартии) КАК НомерПартии,
	|	ЕСТЬNULL(ВТАктуальныеПартии.Дата, ВТПартииБД.Дата) КАК Дата,
	|	ЕСТЬNULL(ВТАктуальныеПартии.ДатаИзготовления, ВТПартииБД.ДатаИзготовления) КАК ДатаИзготовления,
	|	ЕСТЬNULL(ВТАктуальныеПартии.МассаПервоначальная, ВТПартииБД.МассаПервоначальная) КАК МассаПервоначальная,
	|	ЕСТЬNULL(ВТАктуальныеПартии.МассаДоступная, ВТПартииБД.МассаДоступная) КАК МассаДоступная,
	|	ЕСТЬNULL(ВТАктуальныеПартии.Статус, ВТПартииБД.Статус) КАК Статус,
	|	ЕСТЬNULL(ВТАктуальныеПартии.ОКПД2, ВТПартииБД.ОКПД2) КАК ОКПД2,
	|	ЕСТЬNULL(ВТАктуальныеПартии.Производитель, ВТПартииБД.Производитель) КАК Производитель,
	|	ЕСТЬNULL(ВТАктуальныеПартии.Фирма, ВТПартииБД.Фирма) КАК Фирма,
	|	ЕСТЬNULL(ВТАктуальныеПартии.Manufacturer_Address, ВТПартииБД.Manufacturer_Address) КАК Manufacturer_Address,
	|	ЕСТЬNULL(ВТАктуальныеПартии.StoragePlace_Address, ВТПартииБД.StoragePlace_Address) КАК StoragePlace_Address,
	|	ЕСТЬNULL(ВТАктуальныеПартии.ДополнительныеСвойства, ВТПартииБД.ДополнительныеСвойства) КАК ДополнительныеСвойства
	|ИЗ
	|	ВТАктуальныеПартии КАК ВТАктуальныеПартии
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТПартииБД КАК ВТПартииБД
	|		ПО ВТАктуальныеПартии.НомерПартии = ВТПартииБД.НомерПартии";
	
	Запрос.УстановитьПараметр("ТаблицаПартий", ТаблицаПартий);
	Запрос.УстановитьПараметр("Статус", СтатусПодписан());
	Запрос.УстановитьПараметр("ЭтоКЦ", ЭтоКЦ);
	Запрос.УстановитьПараметр("Фирмы", ФирмыТекущегоФилиала(ВыбранныеЗадачи));
	
	ОбновленныеПартии = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрПартия Из ОбновленныеПартии Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		// Обновляем/добавляем строку в регистр партий
		Если СтрПартия.ЕстьПартияИзФГИСЗерно Тогда
			
			МенеджерЗаписи = РегистрыСведений.Зерно_ПартииППЗ.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрПартия);
			МенеджерЗаписи.Записать();
			
			#Если Клиент Тогда
				Если СтрПартия.ЕстьПартияИзБД Тогда
					Сообщить("Партия "+СтрПартия.НомерПартии+" обновлена!");
				Иначе
					Сообщить("Партия "+СтрПартия.НомерПартии+" добавлена!");
				КонецЕсли;
			#КонецЕсли
			
		Иначе
			ОбновитьСведенияОПартии(СтрПартия.НомерПартии);
		КонецЕсли;
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Синхронизация партий завершена!");
	#КонецЕсли
	
КонецПроцедуры

Процедура ОбновитьТаблицуПартий(Параметры, hasMore = Ложь) Экспорт
	
	hasMore = Ложь;
	
	РезультатЗапроса = ВыполнитьЗапрос("GetListGpb", Параметры); // ППЗ
	
	Если РезультатЗапроса.Ошибка Тогда
		#Если Клиент Тогда
			Сообщить("Не удалось обновить таблицу партий! " + Символы.ПС + РезультатЗапроса.ТекстОшибки);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	РезультатОбъект = РезультатЗапроса.Объект;
	
	Если Параметры.ОчищатьТаблицу = Истина Тогда
		ТаблицаПартий.Очистить();
	КонецЕсли;
	
	Если РезультатОбъект.ResponseGetListGpb.Свойства().Получить("Record") = Неопределено Тогда
		Возврат; // Нет записей
	КонецЕсли;
	
	hasMore = (РезультатОбъект.ResponseGetListGpb.hasMore = "true");
	
	Record = РезультатОбъект.ResponseGetListGpb.Record;
	
	Если ТипЗнч(Record) = Тип("ОбъектXDTO") Тогда
		Records = Новый Массив;
		Records.Добавить(Record);
	ИначеЕсли ТипЗнч(Record) = Тип("СписокXDTO") Тогда
		Records = Record;
	КонецЕсли;
	
	Для Каждого Record Из Records Цикл
		
		НоваяСтрока = ТаблицаПартий.Добавить();
		
		НоваяСтрока.НомерПартии = Record.number;
		НоваяСтрока.МассаПервоначальная = Record.amountOriginal;
		НоваяСтрока.МассаДоступная = Record.amountAvailable;
		НоваяСтрока.Статус = Record.status;
		НоваяСтрока.Target = Record.Target;
		НоваяСтрока.Purpose = Record.Purpose;
		
		НоваяСтрока.Дата = ДатаИзXML(Record.DateRegistration);
		НоваяСтрока.ДатаИзготовления = ДатаИзXML(Record.createDate);
		
		НоваяСтрока.OKPD2Code = Record.Product.OKPD2;
		
		НоваяСтрока.Owner_Name 		= Record.Owner.LegalEntity.ShortName;
		НоваяСтрока.Owner_INN 		= Record.Owner.LegalEntity.INN;
		НоваяСтрока.Owner_Address 	= Record.Owner.LegalEntity.Address.Address;
		
		НоваяСтрока.StoragePlace_Address	= СокрЛП(Record.StoragePlace.Address);
		
		НоваяСтрока.Manufacturer_Name 		= Record.Manufacturer.LegalEntity.Name;
		НоваяСтрока.Manufacturer_INN 		= СокрЛП(Record.Manufacturer.LegalEntity.INN);
		НоваяСтрока.Manufacturer_Address 	= Record.Manufacturer.LegalEntity.Address.Address;
		
		ТекстОшибки = ЗаполнитьСтрокуПартии(НоваяСтрока);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			#Если Клиент Тогда
				Сообщить(ТекстОшибки);
			#КонецЕсли
			Если Параметры.Синхронизация Тогда // В случае синхронизации партий ошибка критическая
				ВызватьИсключение "Ошибка получения списка партий! Номер партии: """+Record.number+""". "+ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		// Потребительские свойства помещаем в json
		Если Record.ListValueQualityIndicator.Свойства().Получить("Value") <> Неопределено Тогда	
			Если ТипЗнч(Record.ListValueQualityIndicator.Value) = Тип("ОбъектXDTO") Тогда
				СписокValue = Новый Массив;
				СписокValue.Добавить(Record.ListValueQualityIndicator.Value);
			ИначеЕсли ТипЗнч(Record.ListValueQualityIndicator.Value) = Тип("СписокXDTO") Тогда
				СписокValue = Record.ListValueQualityIndicator.Value;
			КонецЕсли;
			
			МассивСтрок = Новый Массив;
			
			Для Каждого Value Из СписокValue Цикл
				qualityIndicatorCode = Value.qualityIndicatorCode; // Код свойства
				Value = Value.Последовательность().ПолучитьТекст(0); // Значение свойства
				Если ЗначениеЗаполнено(qualityIndicatorCode) И ЗначениеЗаполнено(Value) Тогда
					МассивСтрок.Добавить(СтрШаблон("{""Code"":""%1"",""Value"":""%2""}", qualityIndicatorCode, Value));
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрока.ДополнительныеСвойства = "{""ListValueQualityIndicator"":[" + СтрСоединить(МассивСтрок, ",") + "]}";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьТаблицуЗадачСДИЗ(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Зерно_Задачи.Ссылка КАК ЗадачаСДИЗ,
	|	Зерно_Задачи.Фирма КАК Фирма,
	|	Зерно_Задачи.ОКПД2 КАК ОКПД2,
	|	Зерно_Задачи.Производитель КАК Производитель,
	|	Зерно_Задачи.УПД КАК Документ,
	|	Зерно_Задачи.УПД.ЮрЛицо КАК ЮрЛицо,
	|	Зерно_Задачи.ДатаСоздания КАК ДатаСоздания,
	|	Зерно_Задачи.ПоследняяДатаОбработки КАК ПоследняяДатаОбработки,
	|	Зерно_Задачи.КоличествоПопыток КАК КоличествоПопыток,
	|	Зерно_Задачи.Масса КАК Масса,
	|	Зерно_Задачи.Товар КАК Товар,
	|	Зерно_Задачи.ДатаПроизводства КАК ДатаПроизводства,
	|	Зерно_Задачи.НомерСДИЗ КАК НомерСДИЗ,
	|	Зерно_Задачи.НомерПартии КАК НомерПартии,
	|	Зерно_Задачи.Комментарий КАК Комментарий,
	|	Зерно_Задачи.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА Зерно_Задачи.Статус = 0
	|			ТОГДА ""Ожидание""
	|		КОГДА Зерно_Задачи.Статус = 1
	|			ТОГДА ""В работе""
	|		КОГДА Зерно_Задачи.Статус = 2
	|			ТОГДА ""Выполнена""
	|		КОГДА Зерно_Задачи.Статус = 3
	|			ТОГДА ""Ошибка""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СтатусПредставление,
	|	&Выбран КАК Выбран
	|ИЗ
	|	Справочник.Зерно_Задачи КАК Зерно_Задачи
	|ГДЕ
	|	НЕ Зерно_Задачи.ПометкаУдаления
	|	И Зерно_Задачи.ДатаСоздания МЕЖДУ &НачПериода И &КонПериода
	|	И Зерно_Задачи.Статус В(&Статусы)
	|	И Зерно_Задачи.GUID = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания,
	|	ЗадачаСДИЗ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачПериода", Параметры.НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонецДня(Параметры.КонПериода));
	Запрос.УстановитьПараметр("Статусы", Параметры.СтатусыЗадачСДИЗ);
	Запрос.УстановитьПараметр("Выбран", НЕ ЗапускИзФормы);
	
	ТаблицаЗадачСДИЗ.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура СоздатьЗадачи(ВыбранныеДокументы) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбранныеДокументы) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДатаНаСервере = ОбщегоНазначения.ТекущаяДатаНаСервере();
	
	Для Каждого Стр Из ВыбранныеДокументы Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		Если Стр.Обработан Тогда
			#Если Клиент Тогда
				Сообщить("Строка "+Стр.НомерСтроки+" уже обработана.");
			#КонецЕсли
			Продолжить;
		КонецЕсли;
		
		Стр.Обработан = Истина;
		
		// Если есть проблемы с упаковочными листами, но прошло еще слишком мало времени, то ошибку не отправляем
		Если Стр.ЕстьОшибка И ТекущаяДатаНаСервере - Стр.ДатаПервогоСтатуса < ВремяОжиданияУпаковочныхЛистов() Тогда
			#Если Клиент Тогда
				Сообщить("Строка "+Стр.НомерСтроки+" пропущена. У товара некорректные записи в регистре Упаковочные листы.");
			#КонецЕсли
			Продолжить;
		КонецЕсли;
		
		Попытка
			Результат = СоздатьЗадачуНаСДИЗ(Стр);
		Исключение
			ЗафиксироватьОшибку("Ошибка создания задачи на СДИЗ ("+Стр.Документ+")!", ОписаниеОшибки());
			ВызватьИсключение;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ДобавитьОшибку("Не удалось создать задачу на СДИЗ ("+Стр.Документ+")!", Результат.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Стр.ЗадачаСДИЗ = Результат.ЗадачаСДИЗ;
		Стр.Выбран = Ложь;
		
	КонецЦикла;
	
	ЗавершитьСборОшибок();
	
	#Если Клиент Тогда
		Сообщить("Создание задач завершено!");
	#КонецЕсли
	
КонецПроцедуры

Процедура ПоставитьЗадачиСДИЗВОчередь(ВыбранныеЗадачи) Экспорт
	
	Для Каждого Стр Из ВыбранныеЗадачи Цикл
		
		Если НЕ ЗначениеЗаполнено(Стр.ЗадачаСДИЗ) Тогда
			#Если Клиент Тогда
				Сообщить("Строка "+Стр.НомерСтроки+" пропущена! Не указана задача.");
			#КонецЕсли
			Продолжить;
		КонецЕсли;
		
		ЗадачаОбъект = Стр.ЗадачаСДИЗ.ПолучитьОбъект();
		
		Если ЗадачаОбъект.Статус = СтатусЗадачаОжидание() ИЛИ ЗадачаОбъект.Статус = СтатусЗадачаВыполнена() Тогда
			#Если Клиент Тогда
				Сообщить("Строка "+Стр.НомерСтроки+" пропущена! Задача не должна быть в статусе ""Ожидание"" или ""Выполнена""");
			#КонецЕсли
			Продолжить;
		КонецЕсли;
		
		ЗадачаОбъект.Комментарий = ?(ЗначениеЗаполнено(ЗадачаОбъект.Комментарий), ЗадачаОбъект.Комментарий + " ", "") + "(задача поставлена в очередь повторно)";
		ЗадачаОбъект.Статус = СтатусЗадачаОжидание();
		
		Попытка
			ЗадачаОбъект.Записать();
		Исключение
			#Если Клиент Тогда
				Сообщить("Не удалось записать задачу """+ЗадачаОбъект+""" (строка "+Стр.НомерСтроки+")! "+ ОписаниеОшибки());
			#КонецЕсли
			Продолжить;
		КонецПопытки;
		
		ЗаполнитьЗначенияСвойств(Стр, ЗадачаОбъект);
		Стр.СтатусПредставление = ПредставлениеСтатусаЗадачиСДИЗ(ЗадачаОбъект.Статус);
		#Если Клиент Тогда
			Сообщить("Задача """+ЗадачаОбъект+""" (строка "+Стр.НомерСтроки+") поставлена в очередь.");
		#КонецЕсли
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Все выбранные задачи обработаны!");
	#КонецЕсли
	
КонецПроцедуры

Процедура СоздатьСДИЗы(ВыбранныеЗадачи) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбранныеЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ НеСинхронизироватьПартииПередСозданиемСДИЗ Тогда
		Попытка
			СинхронизироватьПартии(ВыбранныеЗадачи);
		Исключение
			ЗафиксироватьОшибку("Ошибка синхронизации партий!", ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	КоличествоЗадач = ВыбранныеЗадачи.Количество();
	Счетчик = 0;
	
	Для Каждого Стр Из ВыбранныеЗадачи Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
			Счетчик = Счетчик + 1;
			Состояние("Обрабатывается строка "+Счетчик+"/"+КоличествоЗадач+"...");
		#КонецЕсли
		
		Если Стр.Обработан Тогда
			#Если Клиент Тогда
				Сообщить("Строка "+Стр.НомерСтроки+" уже обработана.");
			#КонецЕсли
			Продолжить;
		КонецЕсли;
		
		Стр.Обработан = Истина;
		
		Если НЕ ЗначениеЗаполнено(Стр.ЗадачаСДИЗ) Тогда
			#Если Клиент Тогда
				Сообщить("Строка "+Стр.НомерСтроки+" пропущена! Не указана задача.");
			#КонецЕсли
			Продолжить;
		КонецЕсли;
		
		Попытка
			Результат = СоздатьСДИЗ(Стр.ЗадачаСДИЗ);
		Исключение
			ЗафиксироватьВЗадачеОшибку(Стр.ЗадачаСДИЗ, ОписаниеОшибки());
			ЗафиксироватьОшибку("Ошибка создания СДИЗ (задача "+Стр.ЗадачаСДИЗ+")!", ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			// Некритичная ошибка. Переходим к следующей задаче
			ДобавитьОшибку("В задаче """+Стр.ЗадачаСДИЗ+""" ошибка!", Результат.ТекстОшибки);
		Иначе
			Стр.Выбран = Ложь;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Стр, Стр.ЗадачаСДИЗ);
		Стр.СтатусПредставление = ПредставлениеСтатусаЗадачиСДИЗ(Стр.ЗадачаСДИЗ.Статус);
		
	КонецЦикла;
	
	ЗавершитьСборОшибок();
	
	#Если Клиент Тогда
		Сообщить("Создание СДИЗов завершено!");
	#КонецЕсли
	
КонецПроцедуры

Функция СоздатьПартиюИзДругихПартий(СписокПартий) Экспорт
	
	// Проверяем партии на совпадение ключевых полей
	СписокПолей = Новый Массив;
	СписокПолей.Добавить("Производитель");
	СписокПолей.Добавить("Owner_INN");
	СписокПолей.Добавить("Фирма");
	СписокПолей.Добавить("Purpose");
	СписокПолей.Добавить("Target");
	
	Для Индекс = 1 По СписокПартий.Количество()-1 Цикл
		Для Каждого Поле Из СписокПолей Цикл
			Если СписокПартий[Индекс][Поле] <> СписокПартий[Индекс-1][Поле] Тогда
				Сообщить("Выбранные партии не совпадают по полю """+Поле+"""!");
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОКПД2 = ОпределитьОКПД2НовойПартии(СписокПартий);
	
	Если НЕ ЗначениеЗаполнено(ОКПД2) Тогда
		Сообщить("Не удалось определить ОКПД 2 результирующей партии!");
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = Новый Структура();
	Параметры.Вставить("СписокПартий", СписокПартий);
	Параметры.Вставить("ОКПД2", ОКПД2);
	
	РезультатЗапроса = ВыполнитьЗапрос("CreateGpbFromAnother", Параметры);
	
	Если РезультатЗапроса.Ошибка Тогда
		Сообщить("Не удалось создать партию! " + Символы.ПС + РезультатЗапроса.ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатОбъект = РезультатЗапроса.Объект;
	
	Сообщение = СтрШаблон("Создана новая партия (номер: %1, ОКПД 2: %2)",
	РезультатОбъект.ResponseCreateGpb.number, РезультатОбъект.ResponseCreateGpb.Product.OKPD2);
	
	Сообщить(Сообщение);
	
КонецФункции

Процедура ОбновитьТаблицуСДИЗ(ПараметрыОтбора) Экспорт
	
	ТаблицаСДИЗ.Очистить();
	
	РезультатЗапроса = ВыполнитьЗапрос("GetListGpbSDIZ", ПараметрыОтбора);
	
	Если РезультатЗапроса.Ошибка Тогда
		ЗафиксироватьОшибку("Не удалось обновить таблицу партий!", РезультатЗапроса.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	РезультатОбъект = РезультатЗапроса.Объект;
	
	Если РезультатОбъект.ResponseGetListGpbSDIZ.Свойства().Получить("Record") = Неопределено Тогда
		Возврат; // Нет записей
	КонецЕсли;
	
	Record = РезультатОбъект.ResponseGetListGpbSDIZ.Record;
	
	Если ТипЗнч(Record) = Тип("ОбъектXDTO") Тогда
		Records = Новый Массив;
		Records.Добавить(Record);
	ИначеЕсли ТипЗнч(Record) = Тип("СписокXDTO") Тогда
		Records = Record;
	КонецЕсли;
	
	Для Каждого Record Из Records Цикл
		
		НоваяСтрока = ТаблицаСДИЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Record);
		
		Если ТипЗнч(Record.OperationInRF.OperationSDIZ) = Тип("Строка") Тогда
			НоваяСтрока.OperationSDIZ = Record.OperationInRF.OperationSDIZ;
		ИначеЕсли ТипЗнч(Record.OperationInRF.OperationSDIZ) = Тип("СписокXDTO") Тогда
			Для Каждого Operation Из Record.OperationInRF.OperationSDIZ Цикл
				НоваяСтрока.OperationSDIZ = НоваяСтрока.OperationSDIZ + ?(НоваяСтрока.OperationSDIZ = "", "", "; ") + Operation;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСправочник(ИмяСправочника) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Dictionary", ИмяСправочника);
	
	РезультатЗапроса = ВыполнитьЗапрос("Dictionary", Параметры);
	
	Если РезультатЗапроса.Ошибка Тогда
		Сообщить("Не удалось получить справочник """+ИмяСправочника+"""! " + Символы.ПС + РезультатЗапроса.ТекстОшибки);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьПолныеПрава() Экспорт
	
	Возврат РольДоступна(Метаданные.Роли.Администратор) ИЛИ РольДоступна(Метаданные.Роли.Разработчик);
	
КонецФункции

Функция МенеджерКриптографии() Экспорт
	
	МенеджерКриптографии = Новый МенеджерКриптографии("Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider", "", 80);
	
	Возврат МенеджерКриптографии;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьСведенияОПартии(НомерПартии)
	
	Параметры = Новый Структура();
	Параметры.Вставить("gpbNumber", НомерПартии);
	Параметры.Вставить("ОчищатьТаблицу", Истина);
	Параметры.Вставить("Синхронизация", Истина);
	
	ОбновитьТаблицуПартий(Параметры);
	
	Если ТаблицаПартий.Количество() = 0 Тогда
		
		// Партия не найдена в ФГИС Зерно. Удаляем партию из 1С
		МенеджерЗаписи = РегистрыСведений.Зерно_ПартииППЗ.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.НомерПартии = НомерПартии;
		МенеджерЗаписи.Удалить();
		
		#Если Клиент Тогда
			Сообщить("Партия "+НомерПартии+" удалена!");
		#КонецЕсли
		
	ИначеЕсли ТаблицаПартий.Количество() = 1 Тогда
		
		// Партия найдена в ФГИС Зерно. Обновляем партию из 1С
		МенеджерЗаписи = РегистрыСведений.Зерно_ПартииППЗ.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТаблицаПартий[0]);
		МенеджерЗаписи.Записать();
		
		#Если Клиент Тогда
			Сообщить("Партия "+НомерПартии+" обновлена! Статус: " + ТаблицаПартий[0].Статус);
		#КонецЕсли
		
	Иначе
		
		// По номеру найдено больше одной партии в ФГИС Зерно. Ошибка
		ВызватьИсключение "В ФГИС Зерно найдено больше одной партии по номеру: "+НомерПартии;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьЗадачуНаСДИЗ(Параметры)
	
	Результат = Новый Структура("ЗадачаСДИЗ, ТекстОшибки");
	
	ОшибкиПроверки = ПроверитьПараметрыЗадачи(Параметры);
	
	Если ЗначениеЗаполнено(ОшибкиПроверки) Тогда
		Результат.ТекстОшибки = ОшибкиПроверки;
		Возврат Результат;
	КонецЕсли;
	
	// Проверяем задачу на дубли
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Зерно_Задачи.Ссылка КАК Задача
	|ИЗ
	|	Справочник.Зерно_Задачи КАК Зерно_Задачи
	|ГДЕ
	|	Зерно_Задачи.УПД = &Документ
	|	И НЕ Зерно_Задачи.ПометкаУдаления
	|	И (Зерно_Задачи.ОКПД2 = &ОКПД2
	|				И Зерно_Задачи.Производитель = &Производитель
	|				И (Зерно_Задачи.Товар = &Товар
	|					ИЛИ Зерно_Задачи.Товар = ЗНАЧЕНИЕ(Справочник.Товары.ПустаяСсылка))
	|				И (Зерно_Задачи.ДатаПроизводства = &ДатаПроизводства
	|					ИЛИ Зерно_Задачи.ДатаПроизводства = ДАТАВРЕМЯ(1, 1, 1))
	|			ИЛИ Зерно_Задачи.GUID <> """")";
	
	Запрос.УстановитьПараметр("Документ", Параметры.Документ);
	Запрос.УстановитьПараметр("ОКПД2", Параметры.ОКПД2);
	Запрос.УстановитьПараметр("Поставщик", Параметры.Поставщик);
	Запрос.УстановитьПараметр("Производитель", Параметры.Производитель);
	Запрос.УстановитьПараметр("Фирма", Параметры.Фирма);
	Запрос.УстановитьПараметр("Товар", Параметры.Товар);
	Запрос.УстановитьПараметр("ДатаПроизводства", Параметры.ДатаПроизводства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат.ТекстОшибки = "Уже имеется созданная задача: "+Выборка.Задача;
		Возврат Результат;
		
	КонецЕсли;
	
	
	// Создаем задачу на СДИЗ
	
	НоваяЗадача = Справочники.Зерно_Задачи.СоздатьЭлемент();
	НоваяЗадача.УПД = Параметры.Документ;
	НоваяЗадача.ДатаСоздания = ОбщегоНазначения.ТекущаяДатаНаСервере();
	НоваяЗадача.ОКПД2 = Параметры.ОКПД2;
	НоваяЗадача.Производитель = Параметры.Производитель;
	НоваяЗадача.Фирма = Параметры.Фирма;
	НоваяЗадача.Товар = Параметры.Товар;
	НоваяЗадача.ДатаПроизводства = Параметры.ДатаПроизводства;
	НоваяЗадача.Масса = Параметры.Масса;
	
	Попытка
		НоваяЗадача.Записать();
	Исключение
		Результат.ТекстОшибки = "Не удалось создать задачу на СДИЗ: "+ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	Результат.ЗадачаСДИЗ = НоваяЗадача.Ссылка;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьСДИЗ(ЗадачаСДИЗ)
	
	РезультатСозданияСДИЗ = Новый Структура("ТекстОшибки");
	
	Если ЗадачаСДИЗ.Статус = СтатусЗадачаОшибка() Тогда
		РезультатСозданияСДИЗ.ТекстОшибки = ЗадачаСДИЗ.Комментарий;
		Возврат РезультатСозданияСДИЗ; // В задаче ошибка с предыдущего запуска, не перезаписываем комментарий
	ИначеЕсли ЗадачаСДИЗ.Статус <> СтатусЗадачаОжидание() Тогда
		РезультатСозданияСДИЗ.ТекстОшибки = "Задача должна быть в статусе ""Ожидание""!";
	ИначеЕсли ЗначениеЗаполнено(ЗадачаСДИЗ.НомерСДИЗ) Тогда
		РезультатСозданияСДИЗ.ТекстОшибки = "По задаче уже оформлен СДИЗ (заполнен номер СДИЗ)!";
	ИначеЕсли ЗначениеЗаполнено(ЗадачаСДИЗ.GUID) Тогда
		РезультатСозданияСДИЗ.ТекстОшибки = "Задача заведена для робота RPA (заполнен GUID)!";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатСозданияСДИЗ.ТекстОшибки) Тогда
		ЗафиксироватьВЗадачеОшибку(ЗадачаСДИЗ, РезультатСозданияСДИЗ.ТекстОшибки);
		Возврат РезультатСозданияСДИЗ;
	КонецЕсли;
	
	ПоставитьЗадачуВРаботу(ЗадачаСДИЗ);
	
	// Получаем необходимые данные для СДИЗ
	РезультатПараметрыСДИЗ = ПараметрыСозданияСДИЗ(ЗадачаСДИЗ);
	Если ЗначениеЗаполнено(РезультатПараметрыСДИЗ.ТекстОшибки) Тогда
		РезультатСозданияСДИЗ.ТекстОшибки = РезультатПараметрыСДИЗ.ТекстОшибки;
		ЗафиксироватьВЗадачеОшибку(ЗадачаСДИЗ, РезультатСозданияСДИЗ.ТекстОшибки);
		Возврат РезультатСозданияСДИЗ;
	КонецЕсли;
	ПараметрыСДИЗ = РезультатПараметрыСДИЗ.Параметры;
	
	Если НЕ ЗапускИзФормы Тогда
		ОтпечатокСертификата = Сертификат(ЗадачаСДИЗ.Фирма); // Определяем сертификат для подписания
	КонецЕсли;
	
	// Определяем партию для СДИЗа
	РезультатПартия = ВыделитьПартиюДляСДИЗ(ЗадачаСДИЗ);
	Если ЗначениеЗаполнено(РезультатПартия.ТекстОшибки) Тогда
		РезультатСозданияСДИЗ.ТекстОшибки = РезультатПартия.ТекстОшибки;
		ЗафиксироватьВЗадачеОшибку(ЗадачаСДИЗ, РезультатСозданияСДИЗ.ТекстОшибки);
		Возврат РезультатСозданияСДИЗ;
	КонецЕсли;
	
	НомерПартии 	= РезультатПартия.НомерПартии;
	СозданаПартия 	= РезультатПартия.СозданаПартия; // Партия создана из остатков
	ПараметрыСДИЗ.Вставить("gpbNumber", НомерПартии);
	НомерСДИЗ = Неопределено;
	ТекстОшибкиСозданияСДИЗ = "";
	
	// После определения партии пытаемся создать СДИЗ. Если не получается, отменяем партию
	Попытка
		
		РезультатЗапроса = ВыполнитьЗапрос("CreateGpbSDIZ", ПараметрыСДИЗ);
		
		Если РезультатЗапроса.Ошибка Тогда
			ВызватьИсключение РезультатЗапроса.ТекстОшибки;
		КонецЕсли;
		
		РезультатОбъект = РезультатЗапроса.Объект;
		НомерПартии = РезультатОбъект.ResponseCreateGpbSDIZ.gpbNumber;
		НомерСДИЗ = РезультатОбъект.ResponseCreateGpbSDIZ.number;
		
	Исключение // Возникла ошибка при создании СДИЗ
		
		// Проверяем наличие СДИЗ в системе
		
		ПараметрыОтбораСДИЗ = Новый Структура();
		ПараметрыОтбораСДИЗ.Вставить("gpbNumber", НомерПартии);
		ОбновитьТаблицуСДИЗ(ПараметрыОтбораСДИЗ);
		
		Если ТаблицаСДИЗ.Количество() = 1 И ТаблицаСДИЗ[0].Status = СтатусПодписан() Тогда // СДИЗ в итоге создался, несмотря на ошибку
			
			НомерСДИЗ = ТаблицаСДИЗ[0].Number;
			НомерПартии = ТаблицаСДИЗ[0].gpbNumber;
			
			Если ЗапускИзФормы Тогда
				Сообщить(ОписаниеОшибки());
			КонецЕсли;
			
		Иначе // СДИЗ не создался, отменяем партию
			
			ТекстОшибкиОтменыПартии = "";
			
			Если ЗначениеЗаполнено(РезультатПартия.НомерИсходнойПартии) Тогда
				// Была выделена партия из исходной. Аннулируем выделенную партию и возвращаем параметры исходной.
				
				РезультатОтмены = ОтменитьВыделениеПартииДляСДИЗ(НомерПартии, РезультатПартия.НомерИсходнойПартии, ЗадачаСДИЗ.Масса);
				
				Если ЗначениеЗаполнено(РезультатОтмены.ТекстОшибки) Тогда
					ТекстОшибкиОтменыПартии = РезультатОтмены.ТекстОшибки;
				ИначеЕсли ЗначениеЗаполнено(РезультатОтмены.Сообщение) Тогда
					Если ЗапускИзФормы Тогда
						Сообщить(РезультатОтмены.Сообщение);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли СозданаПартия Тогда
				// Была создана новая партия из остатков. Аннулируем ее.
				
				РезультатАннулирования = АннулироватьПартию(НомерПартии);
				
				Если ЗначениеЗаполнено(РезультатАннулирования.ТекстОшибки) Тогда
					ТекстОшибкиОтменыПартии = РезультатАннулирования.ТекстОшибки;
				ИначеЕсли ЗначениеЗаполнено(РезультатАннулирования.Сообщение) Тогда
					Если ЗапускИзФормы Тогда
						Сообщить(РезультатАннулирования.Сообщение);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				// Партия не была создана. Восстанавливаем статус существующей партии.
				
				РезультатИзмененияСтатуса = ИзменитьПартию(НомерПартии, СтатусПодписан());
				
				Если ЗначениеЗаполнено(РезультатИзмененияСтатуса.ТекстОшибки) Тогда
					ТекстОшибкиОтменыПартии = РезультатИзмененияСтатуса.ТекстОшибки;
				ИначеЕсли ЗначениеЗаполнено(РезультатИзмененияСтатуса.Сообщение) Тогда
					Если ЗапускИзФормы Тогда
						Сообщить(РезультатИзмененияСтатуса.Сообщение);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			РезультатСозданияСДИЗ.ТекстОшибки = ОписаниеОшибки() + ?(ТекстОшибкиОтменыПартии = "", "", ". "+ТекстОшибкиОтменыПартии);
			
			// Если была ошибка в отмене партии, то фиксируем окончательную ошибку в задаче, без повторных попыток
			ЗафиксироватьВЗадачеОшибку(ЗадачаСДИЗ, РезультатСозданияСДИЗ.ТекстОшибки, ЗначениеЗаполнено(ТекстОшибкиОтменыПартии));
			
			// При ошибке отмены партии кидаем исключение, чтобы обработка завершила работу
			Если ЗначениеЗаполнено(ТекстОшибкиОтменыПартии) Тогда
				ВызватьИсключение РезультатСозданияСДИЗ.ТекстОшибки;
			КонецЕсли;
			
			Возврат РезультатСозданияСДИЗ;
			
		КонецЕсли;
		
	КонецПопытки;
	
	ЗафиксироватьВыполнениеЗадачи(ЗадачаСДИЗ, НомерСДИЗ, НомерПартии, СозданаПартия);
	
	Если ЗапускИзФормы Тогда
		Сообщить("По УПД """+ЗадачаСДИЗ.УПД+""" оформлен СДИЗ """+НомерСДИЗ+""" (партия """+НомерПартии+""").");
	КонецЕсли;
	
	Возврат РезультатСозданияСДИЗ;
	
КонецФункции

Функция ВыделитьПартиюДляСДИЗ(ЗадачаСДИЗ)
	
	Результат = Новый Структура("НомерИсходнойПартии, НомерПартии, СозданаПартия, ТекстОшибки",,, Ложь);
	
	// Находим подходящую партию в разрезе фирмы, ОКПД2, производителя.
	// ОКПД2 берется уровня 3 и 4. Производитель в разрезе клиента.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Зерно_Задачи.Фирма КАК Фирма,
	|	Зерно_Задачи.ДатаПроизводства КАК ДатаПроизводства,
	|	Зерно_Задачи.Масса КАК Масса,
	|	СправочникОКПД2.Ссылка КАК ОКПД2,
	|	СправочникОКПД2.Ссылка = Зерно_Задачи.ОКПД2 КАК ЭтоПриоритетныйОКПД2,
	|	ЮрЛица.Ссылка КАК Производитель,
	|	ЮрЛица.Ссылка = Зерно_Задачи.Производитель КАК ЭтоПриоритетныйПроизводитель
	|ПОМЕСТИТЬ ВТ_СтруктураПоискаПартии
	|ИЗ
	|	Справочник.Зерно_Задачи КАК Зерно_Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЮрЛица КАК ЮрЛица
	|		ПО (Зерно_Задачи.Ссылка = &ЗадачаСДИЗ)
	|			И Зерно_Задачи.Производитель.Владелец = ЮрЛица.Владелец
	|			И (НЕ ЮрЛица.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОКПД2 КАК СправочникОКПД2
	|		ПО (Зерно_Задачи.Ссылка = &ЗадачаСДИЗ)
	|			И (НЕ СправочникОКПД2.ПометкаУдаления)
	|			И (Зерно_Задачи.ОКПД2 = СправочникОКПД2.Ссылка
	|				ИЛИ &БратьОКПД2УровняВыше
	|					И Зерно_Задачи.ОКПД2.Родитель = СправочникОКПД2.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Зерно_ПартииППЗ.НомерПартии КАК НомерПартии,
	|	Зерно_ПартииППЗ.Дата КАК Дата,
	|	Зерно_ПартииППЗ.ДатаИзготовления КАК ДатаИзготовления,
	|	Зерно_ПартииППЗ.МассаДоступная КАК МассаДоступная,
	|	Зерно_ПартииППЗ.Manufacturer_Address КАК Manufacturer_Address,
	|	Зерно_ПартииППЗ.StoragePlace_Address КАК StoragePlace_Address,
	|	Зерно_ПартииППЗ.ДополнительныеСвойства КАК ДополнительныеСвойства,
	|	ВТ_СтруктураПоискаПартии.ЭтоПриоритетныйОКПД2 КАК ЭтоПриоритетныйОКПД2,
	|	ВТ_СтруктураПоискаПартии.Производитель КАК Производитель,
	|	ВТ_СтруктураПоискаПартии.ЭтоПриоритетныйПроизводитель КАК ЭтоПриоритетныйПроизводитель
	|ПОМЕСТИТЬ ВТ_Партии
	|ИЗ
	|	ВТ_СтруктураПоискаПартии КАК ВТ_СтруктураПоискаПартии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Зерно_ПартииППЗ КАК Зерно_ПартииППЗ
	|		ПО ВТ_СтруктураПоискаПартии.Фирма = Зерно_ПартииППЗ.Фирма
	|			И ВТ_СтруктураПоискаПартии.ОКПД2 = Зерно_ПартииППЗ.ОКПД2
	|			И ВТ_СтруктураПоискаПартии.Производитель = Зерно_ПартииППЗ.Производитель
	|			И ВТ_СтруктураПоискаПартии.ДатаПроизводства = Зерно_ПартииППЗ.ДатаИзготовления
	|			И ВТ_СтруктураПоискаПартии.Масса <= Зерно_ПартииППЗ.МассаДоступная
	|			И Зерно_ПартииППЗ.Статус = &СтатусПартияПодписана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Партии.НомерПартии КАК НомерПартии,
	|	ВТ_Партии.МассаДоступная КАК МассаДоступная,
	|	ВТ_Партии.Manufacturer_Address КАК Manufacturer_Address,
	|	ВТ_Партии.StoragePlace_Address КАК StoragePlace_Address,
	|	ВТ_Партии.Производитель КАК Производитель,
	|	ВТ_Партии.ДополнительныеСвойства КАК ДополнительныеСвойства
	|ИЗ
	|	ВТ_Партии КАК ВТ_Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Зерно_Задачи КАК Зерно_Задачи
	|		ПО ВТ_Партии.НомерПартии = Зерно_Задачи.НомерПартии
	|			И (Зерно_Задачи.Ссылка <> &ЗадачаСДИЗ)
	|			И (НЕ Зерно_Задачи.ПометкаУдаления)
	|ГДЕ
	|	Зерно_Задачи.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Партии.ДатаИзготовления,
	|	ВТ_Партии.ЭтоПриоритетныйОКПД2 УБЫВ,
	|	ВТ_Партии.ЭтоПриоритетныйПроизводитель УБЫВ,
	|	ВТ_Партии.Дата";
	
	Запрос.УстановитьПараметр("ЗадачаСДИЗ", ЗадачаСДИЗ);
	Запрос.УстановитьПараметр("СтатусПартияПодписана", СтатусПодписан());
	Запрос.УстановитьПараметр("БратьОКПД2УровняВыше", УровеньОКПД2(ЗадачаСДИЗ.ОКПД2) = 4); // Можно брать партию с ОКПД уровня 3, если нет уровня 4
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Если СоздаватьПартииИзОстатковАвтоматически Тогда
			
			РезультатСозданииПартии = СоздатьПартиюИзОстатков(ЗадачаСДИЗ);
			
			Если ЗначениеЗаполнено(РезультатСозданииПартии.ТекстОшибки) Тогда
				Результат.ТекстОшибки = РезультатСозданииПартии.ТекстОшибки;
				Возврат Результат;
			КонецЕсли;
			
			НомерПартии = РезультатСозданииПартии.НомерПартии;
			Результат.НомерПартии 	= НомерПартии;
			Результат.СозданаПартия = Истина;
			
			#Если Клиент Тогда
				Сообщить("Для задачи """+ЗадачаСДИЗ+""" не было найдено подходящей партии и была создана новая из остатков: """+НомерПартии+""".");
			#КонецЕсли
			
			Возврат Результат;
			
		Иначе
			Результат.ТекстОшибки = "Не найдена подходящая партия!";
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	НомерПартии = Выборка.НомерПартии;
	
	Если Выборка.МассаДоступная = ЗадачаСДИЗ.Масса Тогда
		
		// Нашли подходящую по массе партию, не надо ничего резать
		
		РезультатИзмененияСтатуса = ИзменитьПартию(НомерПартии, СтатусЗаблокирован());
		
		Если ЗначениеЗаполнено(РезультатИзмененияСтатуса.ТекстОшибки) Тогда
			Результат.ТекстОшибки = РезультатИзмененияСтатуса.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		Результат.НомерПартии = НомерПартии;
		#Если Клиент Тогда
			Сообщить("Для задачи """+ЗадачаСДИЗ+""" была найдена подходящая партия """+НомерПартии+""".");
		#КонецЕсли
		
		Возврат Результат;
		
	КонецЕсли;
	
	
	// Выделяем часть в отдельную партию
	
	МассаТребуемая = ЗадачаСДИЗ.Масса;
	
	НоваяПартия = Новый Структура();
	НоваяПартия.Вставить("НомерПартии", НомерПартии);
	НоваяПартия.Вставить("МассаДоступная", МассаТребуемая);
	НоваяПартия.Вставить("Target", GpbTarget());
	НоваяПартия.Вставить("Purpose", GpbPurpose());
	НоваяПартия.Вставить("StoragePlace_Address", Выборка.StoragePlace_Address);
	НоваяПартия.Вставить("Производитель", Выборка.Производитель);
	НоваяПартия.Вставить("Manufacturer_Address", Выборка.Manufacturer_Address);
	НоваяПартия.Вставить("ДополнительныеСвойства", Выборка.ДополнительныеСвойства);
	
	СписокПартий = Новый Массив;
	СписокПартий.Добавить(НоваяПартия);
	
	Параметры = Новый Структура();
	Параметры.Вставить("СписокПартий", СписокПартий);
	Параметры.Вставить("ОКПД2", ЗадачаСДИЗ.ОКПД2);
	
	// Одновременно создаем партию в системе и обновляем запись в регистре
	
	НачатьТранзакцию();
	Попытка
		РезультатИзмененияМассы = ИзменитьПартию(НомерПартии, , -МассаТребуемая);
		
		Если ЗначениеЗаполнено(РезультатИзмененияМассы.ТекстОшибки) Тогда
			ОтменитьТранзакцию();
			Результат.ТекстОшибки = "Не удалось выделить партию! " + РезультатИзмененияМассы.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		РезультатЗапроса = ВыполнитьЗапрос("CreateGpbFromAnother", Параметры);
		
		Если РезультатЗапроса.Ошибка Тогда
			Результат.ТекстОшибки = "Не удалось выделить партию! " + РезультатЗапроса.ТекстОшибки;
			ОтменитьТранзакцию();
			Возврат Результат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат.ТекстОшибки = "Ошибка транзакции: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	НомерНовойПартии = РезультатЗапроса.Объект.ResponseCreateGpb.number;
	
	Результат.НомерИсходнойПартии = НомерПартии;
	Результат.НомерПартии = НомерНовойПартии;
	
	#Если Клиент Тогда
		Сообщить("Для задачи """+ЗадачаСДИЗ+""" была выделена новая партия """+Результат.НомерПартии+""" из """+НомерПартии+"""");
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьПартиюИзОстатков(ЗадачаСДИЗ)
	
	Результат = Новый Структура("НомерПартии, ТекстОшибки");
	
	// Определяем StoragePlace по фирме
	StoragePlace_Address = Неопределено;
	Для Каждого ЭлементАдрес Из СоответствиеАдресовХраненияПартий() Цикл
		Если ЭлементАдрес.Значение = ЗадачаСДИЗ.Фирма Тогда
			StoragePlace_Address = ЭлементАдрес.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(StoragePlace_Address) Тогда
		Результат.ТекстОшибки = "Не удалось создать партию! По фирме "+ЗадачаСДИЗ.Фирма+" не определен адрес хранения партий (StoragePlace).";
		Возврат Результат;
	КонецЕсли;
	
	// Определяем Manufacturer_Address по фирме
	Manufacturer_Address = Неопределено;
	Для Каждого ЭлементАдрес Из СоответствиеАдресовПроизводителей() Цикл
		Если ЭлементАдрес.Значение = ЗадачаСДИЗ.Производитель Тогда
			Manufacturer_Address = ЭлементАдрес.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(Manufacturer_Address) Тогда
		Результат.ТекстОшибки = "Не удалось создать партию! По производителю "+ЗадачаСДИЗ.Производитель+" не определен адрес.";
		Возврат Результат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Масса", ЗадачаСДИЗ.Масса);
	Параметры.Вставить("ДатаПроизводства", ЗадачаСДИЗ.ДатаПроизводства);
	Параметры.Вставить("ОКПД2", ЗадачаСДИЗ.ОКПД2);
	Параметры.Вставить("Производитель", ЗадачаСДИЗ.Производитель);
	Параметры.Вставить("StoragePlace_Address", StoragePlace_Address);
	Параметры.Вставить("Manufacturer_Address", Manufacturer_Address);
	
	РезультатЗапроса = ВыполнитьЗапрос("CreateGpbFromResidues", Параметры);
	
	Если РезультатЗапроса.Ошибка Тогда
		Результат.ТекстОшибки = "Не удалось создать партию! " + РезультатЗапроса.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	НомерНовойПартии = РезультатЗапроса.Объект.ResponseCreateGpb.number;
	Результат.НомерПартии = НомерНовойПартии;
	
	Возврат Результат;
	
КонецФункции

Функция АннулироватьПартию(НомерПартии)
	
	РезультатАннулированияПартии = Новый Структура("Сообщение, ТекстОшибки");
	
	Параметры = Новый Структура();
	Параметры.Вставить("НомерПартии", НомерПартии);
	
	РезультатЗапроса = ВыполнитьЗапрос("RequestCanceledGpb", Параметры);	
	
	Если РезультатЗапроса.Ошибка Тогда
		РезультатАннулированияПартии.ТекстОшибки = "Не удалось аннулировать партию """+НомерПартии+"""! " + РезультатЗапроса.ТекстОшибки;
	Иначе
		РезультатАннулированияПартии.Сообщение = "Партия """+НомерПартии+""" аннулирована.";
	КонецЕсли;
	
	Возврат РезультатАннулированияПартии;
	
КонецФункции

Функция ВыполнитьЗапрос(ТипЗапроса, Параметры)
	
	Фабрика = СоздатьФабрику();
	
	Если ТипЗапроса = "Dictionary" Тогда
		Результат = ЗапросСправочник(Параметры);
	ИначеЕсли ТипЗапроса = "GetListGpb" Тогда
		Результат = ЗапросСписокПартийППЗ(Параметры);
	ИначеЕсли ТипЗапроса = "CreateGpbFromResidues" Тогда
		Результат = ЗапросСоздатьПартиюППЗИзОстатков(Параметры);
	ИначеЕсли ТипЗапроса = "CreateGpbFromAnother" Тогда
		Результат = ЗапросСоздатьПартиюППЗИзДругихПартий(Параметры);
	ИначеЕсли ТипЗапроса = "GetListGpbSDIZ" Тогда
		Результат = ЗапросСписокСДИЗППЗ(Параметры);
	ИначеЕсли ТипЗапроса = "CreateGpbSDIZ" Тогда
		Результат = ЗапросСоздатьСДИЗППЗ(Параметры);
	ИначеЕсли ТипЗапроса = "RequestCanceledGpb" Тогда
		Результат = ЗапросАннулироватьПартиюППЗ(Параметры);
	Иначе
		Сообщить("Передан некорректный тип запроса: """+ТипЗапроса+"""");
		Возврат Неопределено;
	КонецЕсли;
	
	МойXML = Новый ЗаписьXML;
	МойXML.УстановитьСтроку(Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина));
	
	Фабрика.ЗаписатьXML(МойXML, Результат.ОбъектXDTO, Результат.Имя);
	ТекстЗапросаXML = МойXML.Закрыть();
	
	РезультатЗапроса = ОтправитьЗапрос(ТекстЗапросаXML);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(РезультатЗапроса.Сообщение);
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Объект = Неопределено;
	
	// Пытаемся понять ошибку в XML
	
	Если РезультатЗапроса.Ошибка Тогда
		
		РезультатЗапроса.Вставить("ТекстОшибки", РезультатЗапроса.Сообщение);
		
		Если ЗапускИзФормы Тогда
			ТекстОтветаXML = РезультатЗапроса.Сообщение;
		КонецЕсли;
		
		Попытка
			Объект = ОбъектXDTO.Body.Fault.detail.ZernoFault;
			Если ЗначениеЗаполнено(Объект.Description) Тогда
				РезультатЗапроса.ТекстОшибки = Объект.Description;
				Если ЗначениеЗаполнено(Объект.Details) Тогда
					РезультатЗапроса.ТекстОшибки = РезультатЗапроса.ТекстОшибки + Объект.Details;
				КонецЕсли;
			КонецЕсли;
		Исключение
			Попытка
				Объект = ОбъектXDTO.Body.Fault;
				Если ЗначениеЗаполнено(Объект.faultstring) Тогда
					РезультатЗапроса.ТекстОшибки = Объект.faultstring;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецПопытки;
		
	Иначе
		Объект = ОбъектXDTO.Body.SendResponseResponse.MessageData.MessagePrimaryContent;
	КонецЕсли;
	
	РезультатЗапроса.Вставить("Объект", Объект);
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ОтправитьЗапрос(ТекстЗапросаXML)
	
	Результат = Новый Структура("Сообщение, Ошибка", "", Ложь);
	
	// Создаем соединение
	
	АдресСервера = "zerno.mcx.gov.ru";
	Если ТестовыйСервер Тогда
		АдресСервера = "demo-zerno.fors.ru";
	КонецЕсли;
	
	РесурсНаСервере = "/ws/api/fgiz?wsdl";
	
	Если HTTP = Неопределено ИЛИ HTTP.Сервер <> АдресСервера Тогда
		HTTP = Новый HTTPСоединение(АдресСервера, , , , , 60, Новый ЗащищенноеСоединениеOpenSSL());
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "text/xml;charset=UTF-8");
	
	// Оборачиваем запрос
	MessagePrimaryContent = 
	"<zerno:MessagePrimaryContent>
	|	%Request%
	|</zerno:MessagePrimaryContent>";
	MessagePrimaryContent = СтрЗаменить(MessagePrimaryContent, "%Request%", ТекстЗапросаXML);	
	
	HTTPЗапрос = Новый HTTPЗапрос(РесурсНаСервере, Заголовки);
	
	// Запрос
	
	MessageID = Строка(Новый УникальныйИдентификатор);
	ReferenceMessageID = MessageID;
	КонвертXML = ПодписанныйКонвертXML("SendRequestRequest", MessagePrimaryContent, MessageID, ReferenceMessageID);
	HTTPЗапрос.УстановитьТелоИзСтроки(КонвертXML, КодировкаТекста.UTF8);
	
	// Смотрим ответ с паузами
	КоличествоПопыток = 5;
	Для ТекПопытка = 1 По КоличествоПопыток Цикл
		
		ОбщегоНазначения.Пауза(ТекПопытка+1);
		
		УстановитьВремяЗапроса();
		HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
		ОтветСтрока = HTTPОтвет.ПолучитьТелоКакСтроку();		
		
		Если СтрНайти(ОтветСтрока, "<ResponseCode>accepted</ResponseCode>") <> 0 Тогда
			Прервать; // Запрос успешно принят
		КонецЕсли;
		
		Если ТекПопытка < КоличествоПопыток И ПроверитьОтветЗапросаНаБлокировку(ОтветСтрока) Тогда
			Продолжить; // Была блокировка, пробуем еще раз после паузы
		КонецЕсли;
		
		// Ошибка
		
		Результат.Ошибка = Истина;
		Результат.Сообщение = ОтветСтрока;
		
		Возврат Результат;
		
	КонецЦикла;
	
	
	// Ответ
	
	MessageID = Строка(Новый УникальныйИдентификатор);
	КонвертXML = ПодписанныйКонвертXML("SendResponseRequest", "", MessageID, ReferenceMessageID);
	HTTPЗапрос.УстановитьТелоИзСтроки(КонвертXML, КодировкаТекста.UTF8);
	
	ОтветныйMessageID = Неопределено;
	
	// Смотрим ответ с паузами
	КоличествоПопыток = 10;
	Для ТекПопытка = 1 По КоличествоПопыток Цикл
		
		ОбщегоНазначения.Пауза(ТекПопытка+1);
		
		УстановитьВремяЗапроса();
		HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
		ОтветСтрока = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если СтрНайти(ОтветСтрока, "<ResponseCode>success</ResponseCode>") <> 0 Тогда
			// Успешно получили ответ. Определяем MessageID
			ОтветныйMessageID = Сред(ОтветСтрока, СтрНайти(ОтветСтрока, "<MessageID>")+11, 36);
			Прервать;
		КонецЕсли;
		
		Если ТекПопытка < КоличествоПопыток И (СтрНайти(ОтветСтрока, "<ResponseCode>queue-is-empty</ResponseCode>") <> 0
			ИЛИ ПроверитьОтветЗапросаНаБлокировку(ОтветСтрока)) Тогда
			Продолжить; // Ответа еще нет, либо была блокировка, пробуем еще раз после паузы
		КонецЕсли;
		
		// Ошибка
		
		Результат.Ошибка = Истина;
		Результат.Сообщение = ОтветСтрока;
		
		Возврат Результат;
		
	КонецЦикла;
	
	
	// Подтверждение получения ответа
	
	Если ЗначениеЗаполнено(ОтветныйMessageID) Тогда
		
		MessageID = Строка(Новый УникальныйИдентификатор);
		ReferenceMessageID = ОтветныйMessageID;
		КонвертXML = ПодписанныйКонвертXML("AckRequest", "", MessageID, ReferenceMessageID);
		HTTPЗапрос.УстановитьТелоИзСтроки(КонвертXML, КодировкаТекста.UTF8);
		
		// Смотрим ответ с паузами
		КоличествоПопыток = 5;
		Для ТекПопытка = 1 По КоличествоПопыток Цикл
			
			ОбщегоНазначения.Пауза(ТекПопытка+1);
			
			УстановитьВремяЗапроса();
			HTTPОтвет = HTTP.ОтправитьДляОбработки(HTTPЗапрос);
			ОтветСтрокаAckRequest = HTTPОтвет.ПолучитьТелоКакСтроку();
			
			Если СтрНайти(ОтветСтрокаAckRequest, "<ResponseCode>success</ResponseCode>") <> 0 Тогда
				Прервать; // Запрос успешно принят
			КонецЕсли;
			
			Если ТекПопытка < КоличествоПопыток И ПроверитьОтветЗапросаНаБлокировку(ОтветСтрокаAckRequest) Тогда
				Продолжить; // Была блокировка, пробуем еще раз после паузы
			КонецЕсли;
			
			// Ошибку AckRequest не обрабатываем
			
			#Если Клиент Тогда
				Сообщить("Неудачный AckRequest! " + Символы.ПС + ОтветСтрокаAckRequest);
			#КонецЕсли
			
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.Сообщение = ОтветСтрока;
	
	Возврат Результат;
	
КонецФункции

#Область Запросы

Функция ЗапросСоздатьСДИЗППЗ(Параметры)
	
	// Realization
	
	ОбъектSeller 	= ЗаполнитьOrganization(Параметры.Realization.Seller);
	ОбъектBuyer 	= ЗаполнитьOrganization(Параметры.Realization.Buyer);
	
	ОбъектContract = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("common"), "DocNumberDateType"));
	ЗаполнитьЗначенияСвойств(ОбъектContract, Параметры.Realization.Contract);
	
	ОбъектConfirmingDocument = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("gpb_sdiz"), "ConfirmingDocumentType"));
	ЗаполнитьЗначенияСвойств(ОбъектConfirmingDocument, Параметры.Realization.ConfirmingDocument);	
	
	ОбъектRealization = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("gpb_sdiz"), "RealizationType"));
	ОбъектRealization.Seller = ОбъектSeller;
	ОбъектRealization.Buyer = ОбъектBuyer;
	ОбъектRealization.Contract = ОбъектContract;
	ОбъектRealization.ConfirmingDocument.Добавить(ОбъектConfirmingDocument);
	
	ОбъектShipping = Неопределено;
	
	Если ЗначениеЗаполнено(Параметры.Shipping) Тогда
		
		ОбъектShipper = ЗаполнитьOrganization(Параметры.Shipping.Shipper);
		ОбъектConsignee = ЗаполнитьOrganization(Параметры.Shipping.Consignee);
		
		ОбъектShipperAddressRF = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "AddressRFType"));
		ОбъектShipperAddressRF.Address = Параметры.Shipping.ShipperAddress;
		
		ОбъектConsigneeAddressRF = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "AddressRFType"));
		ОбъектConsigneeAddressRF.Address = Параметры.Shipping.ConsigneeAddress;
		
		ОбъектTransportInfo = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("common"), "TransportInfoType"));
		ЗаполнитьЗначенияСвойств(ОбъектTransportInfo, Параметры.Shipping.CarrierBlock.TransportInfo);
		ОбъектCarrierBlock = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("gpb_sdiz"), "CarrierBlockType"));
		ОбъектCarrierBlock.Carrier = ЗаполнитьOrganization(Параметры.Realization.Seller);
		ОбъектCarrierBlock.TransportInfo.Добавить(ОбъектTransportInfo);
		
		ОбъектShipping = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("gpb_sdiz"), "ShippingType"));
		ОбъектShipping.Shipper = ОбъектShipper;
		ОбъектShipping.ShipperAddress = ОбъектShipperAddressRF;
		ОбъектShipping.Consignee = ОбъектConsignee;
		ОбъектShipping.ConsigneeAddress = ОбъектConsigneeAddressRF;
		ОбъектShipping.CarrierBlock.Добавить(ОбъектCarrierBlock);
		
	КонецЕсли;
	
	ОбъектOperationInRF = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("gpb_sdiz"), "OperationInRFType"));
	
	Для Каждого OperationSDIZ Из Параметры.OperationSDIZ Цикл
		ОбъектOperationInRF.OperationSDIZ.Добавить(OperationSDIZ);
	КонецЦикла;
	
	ОбъектOperationInRF.Realization = ОбъектRealization;
	
	Если ОбъектShipping <> Неопределено Тогда
		ОбъектOperationInRF.Shipping = ОбъектShipping;
	КонецЕсли;
	
	ОбъектDeclarationOfConformit = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("common"), "DeclarationOfConformitType"));
	ЗаполнитьЗначенияСвойств(ОбъектDeclarationOfConformit, Параметры.DeclarationOfConformit);
	
	ОбъектRequest = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("ws_gpb_sdiz"), "RequestCreateGpbSDIZType"));
	ОбъектRequest.gpbNumber 	= Параметры.gpbNumber;
	ОбъектRequest.OperationInRF = ОбъектOperationInRF;
	ОбъектRequest.DeclarationOfConformit = ОбъектDeclarationOfConformit;
	
	Результат = Новый Структура("ОбъектXDTO, Имя", ОбъектRequest, "RequestCreateGpbSDIZ");
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросПогаситьСДИЗ(Параметры) // Тестовый
	
	ОбъектRequest = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("ws_sdiz"), "RequestCreateExtinctionType"));
	ОбъектRequest.SDIZNumber = Параметры.SDIZNumber;
	ОбъектRequest.amount = Параметры.amount;
	ОбъектRequest.fullExtinction = Параметры.fullExtinction;
	
	Результат = Новый Структура("ОбъектXDTO, Имя", ОбъектRequest, "RequestCreateExtinction");
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросСписокСДИЗППЗ(Параметры)
	
	ОбъектRequest = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("ws_gpb_sdiz"), "RequestGetListGpbSDIZType"));
	
	Если Параметры.Свойство("dateFrom") И ЗначениеЗаполнено(Параметры.dateFrom) Тогда
		ОбъектRequest.dateFrom 	= Параметры.dateFrom;
	КонецЕсли;
	Если Параметры.Свойство("dateTo") И ЗначениеЗаполнено(Параметры.dateTo) Тогда
		ОбъектRequest.dateTo 	= Параметры.dateTo;
	КонецЕсли;
	Если Параметры.Свойство("gpbNumber") И ЗначениеЗаполнено(Параметры.gpbNumber) Тогда
		ОбъектRequest.gpbNumber 	= Параметры.gpbNumber;
	КонецЕсли;
	
	Результат = Новый Структура("ОбъектXDTO, Имя", ОбъектRequest, "RequestGetListGpbSDIZ");
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросСоздатьПартиюППЗИзОстатков(Параметры)
	
	ОбъектRequest = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("ws_gpb"), "RequestCreateGpbType"));
	
	ОбъектGpbFromResidues = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("gpb"), "CreateGpbFromResiduesType"));
	ОбъектGpbFromResidues.amount = Параметры.Масса;
	ОбъектRequest.GpbFromResidues 	= ОбъектGpbFromResidues;
	
	ОбъектGrainProduct = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("common"), "GrainProductType"));
	ОбъектGrainProduct.OKPD2 = Параметры.ОКПД2.Код;
	ОбъектRequest.Product = ОбъектGrainProduct;
	
	ОбъектRequest.Target 		= GpbTarget();
	ОбъектRequest.Purpose 		= GpbPurpose();
	
	ОбъектStoragePlaceAddressRF = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "AddressRFType"));
	ОбъектStoragePlaceAddressRF.Address = Параметры.StoragePlace_Address;
	ОбъектRequest.StoragePlace = ОбъектStoragePlaceAddressRF;
	
	ManufacturerLegalEntity = ДанныеКонтрагента(Параметры.Производитель);
	
	ОбъектManufacturerLegalEntity = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "LegalEntityType")); // ЮЛ
	ЗаполнитьЗначенияСвойств(ОбъектManufacturerLegalEntity, ManufacturerLegalEntity);
	
	ОбъектManufacturerAddressRF = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "AddressRFType"));
	ОбъектManufacturerAddressRF.Address = Параметры.Manufacturer_Address;
	ОбъектManufacturerLegalEntity.Address = ОбъектManufacturerAddressRF;
	
	ОбъектManufacturer = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "SubjectType"));
	ОбъектManufacturer.LegalEntity = ОбъектManufacturerLegalEntity;
	
	ОбъектRequest.Manufacturer 	= ОбъектManufacturer;	
	
	ОбъектListValueQualityIndicator = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("common"), "ListValueQualityIndicatorType"));
	ОбъектRequest.ListValueQualityIndicator = ОбъектListValueQualityIndicator;
	
	ОбъектRequest.createDate 	= Параметры.ДатаПроизводства;
	
	Результат = Новый Структура("ОбъектXDTO, Имя", ОбъектRequest, "RequestCreateGpb");
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросСоздатьПартиюППЗИзДругихПартий(Параметры)
	
	ОбъектRequest = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("ws_gpb"), "RequestCreateGpbType"));
	
	// Заполняем предшествующие партии
	ОбъектGpbFromAnother = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("gpb"), "CreateGpbFromAnotherType"));
	
	Для Каждого Партия Из Параметры.СписокПартий Цикл
		
		ОбъектParentGpb = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("gpb"), "ParentGpbType"));
		ОбъектParentGpb.gpbNumber	= Партия.НомерПартии;
		ОбъектParentGpb.amount		= Партия.МассаДоступная;
		ОбъектGpbFromAnother.ParentGpb.Добавить(ОбъектParentGpb);
		
	КонецЦикла;
	
	ОбъектRequest.GpbFromAnother = ОбъектGpbFromAnother;
	
	ОбъектGrainProduct = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("common"), "GrainProductType"));
	ОбъектGrainProduct.OKPD2 = Параметры.ОКПД2.Код;
	ОбъектRequest.Product = ОбъектGrainProduct;
	
	ПартияОснование = Параметры.СписокПартий[0];
	
	ОбъектRequest.Target 		= ПартияОснование.Target;
	ОбъектRequest.Purpose 		= ПартияОснование.Purpose;
	
	ОбъектStoragePlaceAddressRF = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "AddressRFType"));
	ОбъектStoragePlaceAddressRF.Address = ПартияОснование.StoragePlace_Address;
	ОбъектRequest.StoragePlace = ОбъектStoragePlaceAddressRF;
	
	ManufacturerLegalEntity = ДанныеКонтрагента(ПартияОснование.Производитель);
	
	ОбъектManufacturerLegalEntity = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "LegalEntityType")); // ЮЛ
	ЗаполнитьЗначенияСвойств(ОбъектManufacturerLegalEntity, ManufacturerLegalEntity);
	
	ОбъектManufacturerAddressRF = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "AddressRFType"));
	ОбъектManufacturerAddressRF.Address = ПартияОснование.Manufacturer_Address;
	ОбъектManufacturerLegalEntity.Address = ОбъектManufacturerAddressRF;
	
	ОбъектManufacturer = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "SubjectType"));
	ОбъектManufacturer.LegalEntity = ОбъектManufacturerLegalEntity;
	
	ОбъектRequest.Manufacturer 	= ОбъектManufacturer;
	
	// Заполняем потребительские свойства (через соответствие, чтобы контролировать уникальность кодов свойств)
	ОбъектListValueQualityIndicator = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("common"), "ListValueQualityIndicatorType"));
	СоответствиеПотребительскихСвойств = Новый Соответствие;
	
	Для Каждого Партия Из Параметры.СписокПартий Цикл
		
		Если Партия.ДополнительныеСвойства = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Партия.ДополнительныеСвойства);
		ПотребительскиеСвойства = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		Для Каждого ПотребительскоеСвойство Из ПотребительскиеСвойства.ListValueQualityIndicator Цикл
			СоответствиеПотребительскихСвойств.Вставить(ПотребительскоеСвойство.Code, ПотребительскоеСвойство.Value);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ПотребительскоеСвойство Из СоответствиеПотребительскихСвойств Цикл
		
		ОбъектValue = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("common"), "ValueQualityIndicatorType"));
		ОбъектValue.qualityIndicatorCode 	= ПотребительскоеСвойство.Ключ;
		ОбъектValue.__content 				= ПотребительскоеСвойство.Value;
		
		ОбъектListValueQualityIndicator.Value.Добавить(ОбъектValue);
		
	КонецЦикла;
	
	ОбъектRequest.ListValueQualityIndicator = ОбъектListValueQualityIndicator;
	
	ОбъектRequest.createDate = НачалоДня(ОбщегоНазначения.ТекущаяДатаНаСервере());
	
	Результат = Новый Структура("ОбъектXDTO, Имя", ОбъектRequest, "RequestCreateGpb");
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросСписокПартийППЗ(Параметры)
	
	ОбъектRequest = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("ws_gpb"), "RequestGetListGpbType"));
	
	Если Параметры.Свойство("dateFrom") И ЗначениеЗаполнено(Параметры.dateFrom) Тогда
		ОбъектRequest.dateFrom = Параметры.dateFrom;
	КонецЕсли;
	Если Параметры.Свойство("dateTo") И ЗначениеЗаполнено(Параметры.dateTo) Тогда
		ОбъектRequest.dateTo = Параметры.dateTo;
	КонецЕсли;
	Если Параметры.Свойство("gpbNumber") И ЗначениеЗаполнено(Параметры.gpbNumber) Тогда
		ОбъектRequest.gpbNumber = Параметры.gpbNumber;
	КонецЕсли;	
	Если Параметры.Свойство("status") И ЗначениеЗаполнено(Параметры.status) Тогда
		ОбъектRequest.status = Параметры.status;
	КонецЕсли;
	
	Если Параметры.Свойство("pageNumber") Тогда
		
		ОбъектPaging = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("ws_types"), "PagingType")); // Параметры постраничного предоставления информации
		
		ОбъектPaging.pageNumber = Параметры.pageNumber; // Номер страницы
		ОбъектPaging.pageLength = pageLength; // Количество элементов на странице
		
		ОбъектRequest.Paging = ОбъектPaging;
		
	КонецЕсли;
	
	Результат = Новый Структура("ОбъектXDTO, Имя", ОбъектRequest, "RequestGetListGpb");
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросАннулироватьПартиюППЗ(Параметры)
	
	ОбъектRequest = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("ws_gpb"), "RequestCanceledGpbType"));
	
	ОбъектRequest.gpbNumber = Параметры.НомерПартии;
	
	Результат = Новый Структура("ОбъектXDTO, Имя", ОбъектRequest, "RequestCanceledGpb");
	
	Возврат Результат;	
	
КонецФункции

Функция ЗапросСправочник(Параметры)
	
	ОбъектRequest = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("ws_dictionaries"), "DictionaryRequestType"));
	ОбъектRequest.Dictionary = Параметры.Dictionary;
	
	Результат = Новый Структура("ОбъектXDTO, Имя", ОбъектRequest, "Request");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Разное

Функция СоздатьФабрику()
	
	Если Фабрика <> Неопределено Тогда
		Возврат Фабрика;
	КонецЕсли;
	
	// Загружаем пакеты
	
	МассивПутей = Новый Массив;
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	СоответствиеПространствИмен = Новый Соответствие;
	СоответствиеСхемXSD 		= Новый Соответствие;
	
	СоответствиеСхемXSD.Вставить("fgis_zerno_api_types", "fgis-zerno-api-types-1.0.3.xsd");
	СоответствиеПространствИмен.Вставить("ws_types", "urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/types/1.0.3");
	
	СоответствиеСхемXSD.Вставить("fgis_zerno_dictionary", "fgis-zerno-dictionary-1.0.3.xsd");
	СоответствиеПространствИмен.Вставить("dictionary", "urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/dictionary/1.0.3");	
	СоответствиеСхемXSD.Вставить("fgis_zerno_api_dictionaries", "fgis-zerno-api-dictionaries-1.0.3.xsd");
	СоответствиеПространствИмен.Вставить("ws_dictionaries", "urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/dictionaries/1.0.3");
	
	СоответствиеСхемXSD.Вставить("fgis_zerno_common", "fgis-zerno-common-1.0.3.xsd");
	СоответствиеПространствИмен.Вставить("common", "urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/common/1.0.3");
	
	СоответствиеСхемXSD.Вставить("fgis_zerno_organizations", "fgis-zerno-organizations-1.0.3.xsd");
	СоответствиеПространствИмен.Вставить("organizations", "urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/organizations/1.0.3");
	
	СоответствиеСхемXSD.Вставить("fgis_zerno_gpb", "fgis-zerno-gpb-1.0.3.xsd");
	СоответствиеПространствИмен.Вставить("gpb", "urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/gpb/1.0.3");
	СоответствиеСхемXSD.Вставить("fgis_zerno_api_gpb", "fgis-zerno-api-gpb-1.0.3.xsd");
	СоответствиеПространствИмен.Вставить("ws_gpb", "urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/gpb/1.0.3");
	
	СоответствиеСхемXSD.Вставить("fgis_zerno_gpb_sdiz", "fgis-zerno-gpb-sdiz-1.0.3.xsd");
	СоответствиеПространствИмен.Вставить("gpb_sdiz", "urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/gpb-sdiz/1.0.3");
	СоответствиеСхемXSD.Вставить("fgis_zerno_api_gpb_sdiz", "fgis-zerno-api-gpb-sdiz-1.0.3.xsd");
	СоответствиеПространствИмен.Вставить("ws_gpb_sdiz", "urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/gpb-sdiz/1.0.3");
	
	Для Каждого ЭлементСхемаXSD Из СоответствиеСхемXSD Цикл
		ИмяФайла = КаталогВременныхФайлов + ЭлементСхемаXSD.Значение;
		Макет = ПолучитьМакет(ЭлементСхемаXSD.Ключ);
		Макет.Записать(ИмяФайла);
		МассивПутей.Добавить(ИмяФайла);
	КонецЦикла;
	
	Фабрика = СоздатьФабрикуXDTO(МассивПутей);
	
	Возврат Фабрика;
	
КонецФункции

Функция ПодписанныйКонвертXML(ТипЗапроса, MessagePrimaryContent, MessageID, ReferenceMessageID)
	
	КонвертXML = 
	"<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
	| <soap:Header/>
	| <soap:Body>
	|  <zerno:%ТипЗапроса% xmlns:zerno=""urn://x-artefacts-mcx-gov-ru/fgiz-zerno/api/ws/types/1.0.3"">
	|   <zerno:MessageData Id=""SIGNED_BY_CALLER"">
	|    <zerno:MessageID>%MessageID%</zerno:MessageID>
	|    <zerno:ReferenceMessageID>%ReferenceMessageID%</zerno:ReferenceMessageID>%MessagePrimaryContent%
	|   </zerno:MessageData>
	|   <zerno:InformationSystemSignature>
	|    <ds:Signature xmlns:ds=""http://www.w3.org/2000/09/xmldsig#"">
	|     <ds:SignedInfo>
	|      <ds:CanonicalizationMethod Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
	|      <ds:SignatureMethod Algorithm=""%SignatureMethod%""/>
	|       <ds:Reference URI=""#SIGNED_BY_CALLER"">
	|        <ds:Transforms>
	|         <ds:Transform Algorithm=""http://www.w3.org/2001/10/xml-exc-c14n#""/>
	|         <ds:Transform Algorithm=""urn://smev-gov-ru/xmldsig/transform""/>
	|        </ds:Transforms>
	|        <ds:DigestMethod Algorithm=""%DigestMethod%""/>
	|        <ds:DigestValue>%DigestValue%</ds:DigestValue>
	|       </ds:Reference>
	|      </ds:SignedInfo>
	|      <ds:SignatureValue>%SignatureValue%</ds:SignatureValue>
	|      <ds:KeyInfo>
	|      <ds:X509Data>
	|        <ds:X509Certificate>%BinarySecurityToken%</ds:X509Certificate>
	|      </ds:X509Data>
	|     </ds:KeyInfo>
	|    </ds:Signature>
	|   </zerno:InformationSystemSignature>
	|  </zerno:%ТипЗапроса%>
	| </soap:Body>
	|</soap:Envelope>";
	
	
	
	КонвертXML = СтрЗаменить(КонвертXML, "%ТипЗапроса%", ТипЗапроса);
	КонвертXML = СтрЗаменить(КонвертXML, "%MessagePrimaryContent%", MessagePrimaryContent);
	КонвертXML = СтрЗаменить(КонвертXML, "%MessageID%", MessageID);
	КонвертXML = СтрЗаменить(КонвертXML, "%ReferenceMessageID%", ReferenceMessageID);
	
	ПодписатьXML(КонвертXML);
	
	Возврат КонвертXML;
	
КонецФункции

Функция ДекларацияОСоответствии(ЗадачаСДИЗ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходнаяНалТабличнаяЧасть.Товар.Сертификат КАК Сертификат
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	Документ.РасходнаяНал.ТабличнаяЧасть КАК РасходнаяНалТабличнаяЧасть
	|ГДЕ
	|	РасходнаяНалТабличнаяЧасть.Ссылка = &Ссылка
	|	И РасходнаяНалТабличнаяЧасть.Товар.ОКПД2 <> ЗНАЧЕНИЕ(Справочник.ОКПД2.ПустаяСсылка)
	|	И (РасходнаяНалТабличнаяЧасть.Товар = &Товар
	|			ИЛИ &НетОтбораПоТовару)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сертификаты.Сертификат.РегНомер КАК РегНомер,
	|	ВТ_Сертификаты.Сертификат.ВыданКогда КАК ВыданКогда,
	|	ВТ_Сертификаты.Сертификат.ДействПо КАК ДействПо
	|ИЗ
	|	ВТ_Сертификаты КАК ВТ_Сертификаты";
	
	Запрос.УстановитьПараметр("Ссылка", ЗадачаСДИЗ.УПД);
	Запрос.УстановитьПараметр("Товар", ЗадачаСДИЗ.Товар);
	Запрос.УстановитьПараметр("НетОтбораПоТовару", НЕ ЗначениеЗаполнено(ЗадачаСДИЗ.Товар));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Сертификат = Новый Структура("number, date, dateEnd", СокрЛП(Выборка.РегНомер), Выборка.ВыданКогда, Выборка.ДействПо);
	
	Возврат Сертификат;
	
КонецФункции

Функция ЗаполнитьСтрокуПартии(СтрокаПартии)
	
	СписокОшибок = Новый Массив;
	
	// Определяем фирму
	
	СтрокаПартии.Фирма = СоответствиеАдресовХраненияПартий().Получить(СтрокаПартии.StoragePlace_Address);
	Если НЕ ЗначениеЗаполнено(СтрокаПартии.Фирма) Тогда
		СписокОшибок.Добавить("Не определена фирма по адресу хранения партии: " + СтрокаПартии.StoragePlace_Address);
	КонецЕсли;
	
	// Определяем производителя
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЮрЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЮрЛица КАК ЮрЛица
	|ГДЕ
	|	ЮрЛица.ИНН = &ИНН
	|	И НЕ ЮрЛица.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", СтрокаПартии.Manufacturer_INN);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СписокОшибок.Добавить("Не найден производитель партии в справочнике Юрлица по ИНН: " + СтрокаПартии.Manufacturer_INN);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтрокаПартии.Производитель = Выборка.Ссылка;
	КонецЕсли;
	
	// Определяем ОКПД 2
	
	СтрокаПартии.ОКПД2 = Справочники.ОКПД2.НайтиПоКоду(СтрокаПартии.OKPD2Code);
	Если НЕ ЗначениеЗаполнено(СтрокаПартии.ОКПД2) Тогда
		СписокОшибок.Добавить("Не найден ОКПД 2 по коду: " + СтрокаПартии.OKPD2Code);
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(СписокОшибок, Символы.ПС);
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура УстановитьВремяЗапроса()
	
	// Кол-во запросов за период времени ограничено.
	// Если еще рано отправлять новый запрос, ждем необходимое время.
	
	ПериодВремени = 60000; // В миллисекундах. Считаем кол-во запросов за этот период времени
	ДопустимоеКоличествоЗапросов = ?(ТестовыйСервер, 12, 12);
	
	Если ЖурналЗапросов = Неопределено Тогда
		ЖурналЗапросов = Новый ТаблицаЗначений;
		ЖурналЗапросов.Колонки.Добавить("ВремяЗапроса", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналЗапросов.ВремяЗапроса КАК ВремяЗапроса
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ЖурналЗапросов КАК ЖурналЗапросов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 999999
	|	ВТ.ВремяЗапроса КАК ВремяЗапроса
	|ИЗ
	|	ВТ КАК ВТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяЗапроса УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "999999", ДопустимоеКоличествоЗапросов);
	
	Запрос.Параметры.Вставить("ЖурналЗапросов", ЖурналЗапросов);
	
	ЖурналЗапросов = Запрос.Выполнить().Выгрузить();
	
	ПервоеВремя = ?(ЖурналЗапросов.Количество() = 0, 0, ЖурналЗапросов[ЖурналЗапросов.Количество()-1].ВремяЗапроса);
	ТекущееВремя = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если ТекущееВремя - ПервоеВремя < ПериодВремени И ЖурналЗапросов.Количество() >= ДопустимоеКоличествоЗапросов Тогда
		// За выделенный промежуток было больше допустимого кол-ва запросов. Ждем необходимое время
		ВремяОжидания = Мин(Цел((ПервоеВремя + ПериодВремени - ТекущееВремя)/1000) + 5, 30);
		#Если Клиент Тогда
			Сообщить("Превышен лимит запросов! Ждем "+ВремяОжидания + " сек...");
		#КонецЕсли
		ОбщегоНазначения.Пауза(ВремяОжидания);
	КонецЕсли;
	
	НоваяСтрока = ЖурналЗапросов.Добавить();
	НоваяСтрока.ВремяЗапроса = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
КонецПроцедуры

Функция ПроверитьПараметрыЗадачи(Параметры)
	
	СписокОшибок = Новый Массив;
	
	Если ЗначениеЗаполнено(Параметры.ЗадачаСДИЗ) Тогда
		СписокОшибок.Добавить("Уже имеется созданная задача.");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ОКПД2) Тогда
		СписокОшибок.Добавить("Не определен ОКПД2. Проверьте заполнение ОКПД2 у товара """+Параметры.Товар+""" (арт. "+Параметры.Товар.Артикул+").");
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Параметры.Производитель) Тогда
		СписокОшибок.Добавить("Не определен Производитель. Проверьте заполнение ИНН у поставщика """+Параметры.Поставщик+""" и наличие юрлица с этим ИНН в базе 1С.");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры.ОКОПФ) Тогда
		СписокОшибок.Добавить("Не задан ОКОПФ у юрлица """+Параметры.ЮрЛицо+""" (ИНН "+Параметры.ЮрЛицо.ИНН+").");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры.ОГРН) Тогда
		СписокОшибок.Добавить("Не задан ОГРН у юрлица """+Параметры.ЮрЛицо+""" (ИНН "+Параметры.ЮрЛицо.ИНН+").");
	КонецЕсли;
	
	Если Параметры.Масса = 0 Тогда
		СписокОшибок.Добавить("Не заполнена масса у товара """+Параметры.Товар+""" (арт. "+Параметры.Товар.Артикул+"). Проверьте вес нетто товара.");
	КонецЕсли;
	
	Если Параметры.ОКОПФ.Наименование = "ИП" И НЕ КорректноеНаименованиеИП(Параметры.ЮрЛицо) Тогда
		СписокОшибок.Добавить("У юрлица """+Параметры.ЮрЛицо+""" (ИНН "+Параметры.ЮрЛицо.ИНН+") некорректное полное наименование, требуется указать ФИО полностью, без инициалов.");
	КонецЕсли;
	
	Если Параметры.ЕстьОшибка Тогда
		СписокОшибок.Добавить("У товара """+Параметры.Товар+""" (арт. "+Параметры.Товар.Артикул+") некорректные записи в регистре Упаковочные листы.");
	КонецЕсли;
	
	Возврат СтрСоединить(СписокОшибок, Символы.ПС);
	
КонецФункции

Функция ДанныеКонтрагента(ЮрЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЮрЛица.ИНН КАК INN,
	|	ЮрЛица.ОГРН КАК OGRN,
	|	ПериодическиеРеквизитыЮрЛицаСрезПоследних.ЗначениеРек КАК KPP,
	|	ЮрЛица.Наименование КАК ShortName,
	|	ЕСТЬNULL(ПолноеНаименованиеСрезПоследних.Наименование, ЮрЛица.Наименование) КАК Name
	|ИЗ
	|	Справочник.ЮрЛица КАК ЮрЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодическиеРеквизитыЮрЛица.СрезПоследних КАК ПериодическиеРеквизитыЮрЛицаСрезПоследних
	|		ПО (ПериодическиеРеквизитыЮрЛицаСрезПоследних.Объект = ЮрЛица.Ссылка)
	|			И (ПериодическиеРеквизитыЮрЛицаСрезПоследних.Тип = ЗНАЧЕНИЕ(Справочник.ПериодическиеРеквизиты.КодКПП))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолноеНаименование.СрезПоследних КАК ПолноеНаименованиеСрезПоследних
	|		ПО ЮрЛица.Ссылка = ПолноеНаименованиеСрезПоследних.Объект
	|ГДЕ
	|	ЮрЛица.Ссылка = &Ссылка
	|	И НЕ ЮрЛица.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", ЮрЛицо);
	
	Возврат Запрос.Выполнить().Выгрузить()[0];
	
КонецФункции

Функция ОпределитьОКПД2НовойПартии(СписокПартий)
	
	ОКПД2 = Неопределено;
	ПоследнийУровеньОКПД2 = 5;
	
	Для Каждого Партия Из СписокПартий Цикл
		
		Если НЕ ЗначениеЗаполнено(Партия.ОКПД2) Тогда
			Сообщить("У партии "+Партия.НомерПартии+" не задан ОКПД 2!");
			Возврат Неопределено;
		КонецЕсли;
		
		УровеньОКПД2 = УровеньОКПД2(Партия.ОКПД2);
		
		Если УровеньОКПД2 < ПоследнийУровеньОКПД2 Тогда
			ОКПД2 = Партия.ОКПД2;
			ПоследнийУровеньОКПД2 = УровеньОКПД2;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОКПД2;
	
КонецФункции

Функция УровеньОКПД2(ОКПД2)
	Возврат СтрРазделить(ОКПД2.Код, ".").Количество();
КонецФункции

Функция ДатаИзXML(XMLDate)
	
	Возврат Дата(СтрЗаменить(Лев(XMLDate, 10), "-", ""));
	
КонецФункции

Функция КорректноеНаименованиеИП(ЮрЛицо)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПолноеНаименованиеСрезПоследних.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ПолноеНаименование.СрезПоследних(, Объект = &ЮрЛицо) КАК ПолноеНаименованиеСрезПоследних");
	Запрос.УстановитьПараметр("ЮрЛицо", ЮрЛицо);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	НаименованиеКонтрагента = Выборка.Наименование;
	
	Возврат СтрНайти(НаименованиеКонтрагента, ".") = 0; // Нет точек, значит можем распарсить на ФИО
	
КонецФункции

Процедура ПоставитьЗадачуВРаботу(ЗадачаСДИЗ)
	
	ЗадачаОбъект = ЗадачаСДИЗ.ПолучитьОбъект();
	ЗадачаОбъект.ПоследняяДатаОбработки = ОбщегоНазначения.ТекущаяДатаНаСервере();	
	ЗадачаОбъект.КоличествоПопыток = ЗадачаОбъект.КоличествоПопыток + 1;
	ЗадачаОбъект.Статус = СтатусЗадачаВРаботе();
	
	УстановитьПривилегированныйРежим(Истина);
	ЗадачаОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗафиксироватьВЗадачеОшибку(ЗадачаСДИЗ, ТекстОшибки, ОкончательнаяОшибка = Ложь)
	
	ЗадачаОбъект = ЗадачаСДИЗ.ПолучитьОбъект();
	ЗадачаОбъект.ПоследняяДатаОбработки = ОбщегоНазначения.ТекущаяДатаНаСервере();	
	ЗадачаОбъект.Комментарий = ТекстОшибки;
	
	// Если превышено количество попыток, то ставим ошибку, иначе опять отдаем в работу
	Если ЗадачаОбъект.КоличествоПопыток >= МаксимальноеКоличествоПопытокОбработкиЗадачи() ИЛИ ОкончательнаяОшибка Тогда
		ЗадачаОбъект.Статус = СтатусЗадачаОшибка();
	Иначе
		ЗадачаОбъект.Статус = СтатусЗадачаОжидание();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ЗадачаОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗафиксироватьВыполнениеЗадачи(ЗадачаСДИЗ, НомерСДИЗ, НомерПартии, СозданаПартия)
	
	ЗадачаОбъект = ЗадачаСДИЗ.ПолучитьОбъект();
	ЗадачаОбъект.ПоследняяДатаОбработки = ОбщегоНазначения.ТекущаяДатаНаСервере();	
	ЗадачаОбъект.Статус = СтатусЗадачаВыполнена();
	ЗадачаОбъект.Комментарий = "";
	ЗадачаОбъект.НомерСДИЗ = НомерСДИЗ;
	ЗадачаОбъект.НомерПартии = НомерПартии;
	ЗадачаОбъект.СозданаПартия = СозданаПартия;
	
	УстановитьПривилегированныйРежим(Истина);
	ЗадачаОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПредставлениеСтатусаЗадачиСДИЗ(Статус)
	
	Если Статус = 0 Тогда
		Возврат "Ожидание";
	ИначеЕсли Статус = 1 Тогда
		Возврат "В работе";
	ИначеЕсли Статус = 2 Тогда
		Возврат "Выполнена";
	ИначеЕсли Статус = 3 Тогда
		Возврат "Ошибка";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ПроверитьОтветЗапросаНаБлокировку(ОтветСтрока)
	
	Если СтрНайти(ОтветСтрока, "Отправитель заблокирован, превышен лимит сообщений в минуту") = 0 Тогда
		Возврат Ложь; // Это не блокировка
	КонецЕсли;
	
	Если НЕ ЗапускИзФормы Тогда
		ЗафиксироватьОшибку("Отправитель заблокирован, превышен лимит сообщений в минуту.");
	КонецЕсли;
	
	#Если Клиент Тогда
		Сообщить("Отправитель заблокирован! Ждем несколько минут...");
	#КонецЕсли
	
	Для Счетчик = 1 По 15 Цикл
		ОбщегоНазначения.Пауза(30);
	КонецЦикла;
	
	#Если Клиент Тогда
		Сообщить("Ожидание завершено!");
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

Функция ИзменитьПартию(НомерПартии, Статус = Неопределено, ИзменениеМассы = Неопределено)
	
	Результат = Новый Структура("Сообщение, ТекстОшибки");
	Сообщения = Новый Массив;
	
	МенеджерЗаписи = РегистрыСведений.Зерно_ПартииППЗ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НомерПартии = НомерПартии;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.НомерПартии) Тогда
		Результат.ТекстОшибки = "Не удалось изменить партию в регистре! Не найдена партия по номеру """+НомерПартии+""".";
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Статус) Тогда
		Сообщения.Добавить("Статус изменен с """+МенеджерЗаписи.Статус+""" на """+Статус+"""");
		МенеджерЗаписи.Статус = Статус;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИзменениеМассы) Тогда
		МассаДоступная = МенеджерЗаписи.МассаДоступная + ИзменениеМассы;
		Если МассаДоступная < 0 Тогда
			Результат.ТекстОшибки = "Не удалось изменить партию """+НомерПартии+""" в регистре!
			|Доступная масса стала отрицательной: "+МенеджерЗаписи.МассаДоступная+" + ("+ИзменениеМассы+") = "+МассаДоступная+".";
			Возврат Результат;
		Иначе
			Сообщения.Добавить("Доступная масса изменена с """+МенеджерЗаписи.МассаДоступная+""" на """+МассаДоступная+"""");
			МенеджерЗаписи.МассаДоступная = МассаДоступная;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Сообщения.Количество() > 0 Тогда
		Результат.Сообщение = "Партия """+НомерПартии+""" изменена в регистре. "+СтрСоединить(Сообщения, ",");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтменитьВыделениеПартииДляСДИЗ(НомерПартии, НомерИсходнойПартии, МассаТребуемая)
	
	Результат = Новый Структура("Сообщение, ТекстОшибки");
	
	НачатьТранзакцию();
	Попытка
		// Возвращаем выделенное количество
		Если ЗначениеЗаполнено(НомерИсходнойПартии) И ЗначениеЗаполнено(МассаТребуемая) Тогда
			
			РезультатИзмененияМассы = ИзменитьПартию(НомерИсходнойПартии, , МассаТребуемая);
			
			Если ЗначениеЗаполнено(РезультатИзмененияМассы.ТекстОшибки) Тогда
				ОтменитьТранзакцию();
				
				Результат.ТекстОшибки = РезультатИзмененияМассы.ТекстОшибки;
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатАннулирования = АннулироватьПартию(НомерПартии);
		
		Если ЗначениеЗаполнено(РезультатАннулирования.ТекстОшибки) Тогда
			ОтменитьТранзакцию();
			Результат.ТекстОшибки = РезультатАннулирования.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат.ТекстОшибки = "Ошибка транзакции: " + ОписаниеОшибки();
		Возврат Результат;
	КонецПопытки;
	
	Результат.Сообщение = РезультатАннулирования.Сообщение;
	
	Возврат Результат;
	
КонецФункции

Функция Manufacturer_Address(Производитель)
	
	Manufacturer_Address = "";
	
	Возврат Manufacturer_Address;
	
КонецФункции

Функция Сертификат(Знач Фирма = Неопределено)
	
	Фирма = ?(Фирма = Неопределено, Справочники.Фирмы.ПустаяСсылка(), Фирма);
	
	НайденнаяСтрока = Сертификаты.Найти(Фирма, "Фирма");
	Если НайденнаяСтрока <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрока.Отпечаток) Тогда
		Возврат НайденнаяСтрока.Отпечаток;
	ИначеЕсли ЗначениеЗаполнено(Фирма) Тогда // Не нашли сертификат для фирмы, берем по умолчанию
		НайденнаяСтрока = Сертификаты.Найти(Справочники.Фирмы.ПустаяСсылка(), "Фирма");
		Если НайденнаяСтрока <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрока.Отпечаток) Тогда
			Возврат НайденнаяСтрока.Отпечаток;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ФирмыТекущегоФилиала(ВыбранныеЗадачи = Неопределено)
	
	Если ЭтоКЦ ИЛИ НЕ ЗначениеЗаполнено(ВыбранныеЗадачи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Фирмы = Новый Массив;
	
	Для Каждого Стр Из ВыбранныеЗадачи Цикл
		Если Фирмы.Найти(Стр.Фирма) = Неопределено Тогда
			Фирмы.Добавить(Стр.Фирма);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Фирмы;
	
КонецФункции

Функция ИПБезОтчества(ЮрЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект
	|	И ДополнительныеСведения.Свойство.Наименование = ""ИП без отчества""
	|	И ДополнительныеСведения.Значение = ИСТИНА";
	
	Запрос.УстановитьПараметр("Объект", ЮрЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

Процедура ЗафиксироватьОшибку(Ошибка, ДопИнформация = "")
	
	// Используется для вывода одной ошибки
	
	ДобавитьОшибку(Ошибка, ДопИнформация);
	ЗавершитьСборОшибок();
	
КонецПроцедуры

Процедура ДобавитьОшибку(Ошибка, ДопИнформация = "")
	
	// Собираем ошибки в массив
	
	ТекстОшибки = Ошибка + ?(ДопИнформация = "", "", " " + ДопИнформация);
	
	Если ЗапускИзФормы Тогда
		Сообщить(ТекстОшибки);
	Иначе
		Если НЕ ЗначениеЗаполнено(МассивОшибок) Тогда
			МассивОшибок = Новый Массив;
		КонецЕсли;
		МассивОшибок.Добавить(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьСборОшибок()
	
	Если НЕ ЗначениеЗаполнено(МассивОшибок) Тогда
		Возврат;
	КонецЕсли;
	
	// Свернем массив ошибок для удаления дублей
	ТЗОшибки = Новый ТаблицаЗначений;
	ТЗОшибки.Колонки.Добавить("Ошибка", Новый ОписаниеТипов("Строка"));
	Для Каждого СтрОшибка Из МассивОшибок Цикл
		ТЗОшибки.Добавить().Ошибка = СтрОшибка;
	КонецЦикла;
	ТЗОшибки.Свернуть("Ошибка");
	МассивОшибок = ТЗОшибки.ВыгрузитьКолонку("Ошибка");
	
	ТекстПисьма = СтрСоединить(МассивОшибок, Символы.ПС);
	
	МассивОшибок = Неопределено;
	
	Если ЗапускИзФормы Тогда		
		Сообщить(ТекстПисьма);
		Возврат;
	КонецЕсли;
	
	Получатели = Новый Массив;
	
	Для Каждого ЭлСотрудник Из СотрудникиТехподдержки Цикл
		Email = ЭлСотрудник.Значение.Email;
		Если ЗначениеЗаполнено(Email) Тогда
			Получатели.Добавить(Email);
		КонецЕсли;
	КонецЦикла;		
	
	Если Получатели.Количество() > 0 Тогда
		
		ШапкаПисьма = "Фирма: " + ОсновнаяФирма;
		ТекстПисьма = ШапкаПисьма + Символы.ПС + Символы.ПС + ТекстПисьма;	
		
		ОтправитьПисьмо(ТекстПисьма, Получатели);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьПисьмо(ТекстПисьма, Получатели = Неопределено, Знач ТемаПисьма = Неопределено)
	
	Если ТекстПисьма = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Подвал письма
	ИмяБазы = СтрокаСоединенияИнформационнойБазы();
	ИмяКомпьютера = ИмяКомпьютера();
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	
	ПодвалПисьма = Символы.ПС + Символы.ПС +
	"База: "+ИмяБазы+" имя компьютера: "+ИмяКомпьютера+ 
	"; каталог текущего пользователя: "+КаталогВременныхФайлов;
	
	// Формирование и отправка
	ТекстПисьма = ТекстПисьма + ПодвалПисьма;
	
	ТемаПисьма = "РоботЗерно. " + ?(ЗначениеЗаполнено(ТемаПисьма), ТемаПисьма + ". ", "") + ОсновнаяФирма;
	
	ОбщегоНазначения.ОтправитьПочту(Получатели, ТемаПисьма, ТекстПисьма,,, Ложь);
	
КонецПроцедуры

#Область Криптография

Процедура ПодписатьXML(КонвертXML)
	
	Если НЕ ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		ВызватьИсключение "Не указан сертификат для подписания сообщений!";
	КонецЕсли;
	
	Если КомпонентаКриптографии = Неопределено Тогда
		КомпонентаКриптографии = ПодключитьКомпонентуПоИдентификатору("ExtraCryptoAPI", "ExtraCryptoAPI").ПодключаемыйМодуль;
	КонецЕсли;
	Если КомпонентаКриптографии = Неопределено Тогда
		ВызватьИсключение "Не удалось подключить внешнюю компоненту XMLDSignAddIn!";
	КонецЕсли;
	
	КонвертXML = ФорматироватьXML(КонвертXML);
	КонвертXML = СтрЗаменить(КонвертXML, "<?xml version=""1.0"" encoding=""UTF-8""?>", "");
	
	МенеджерКриптографии = МенеджерКриптографии();
	
	Сертификат = СертификатПоОтпечатку(ОтпечатокСертификата, МенеджерКриптографии);
	СертификатКриптографииBase64 = СертификатКриптографииBase64(Сертификат.Выгрузить());
	
	ВыбранныйАлгоритмПодписи 		= "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256";
	ВыбранныйАлгоритмХеширования 	= "urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-256";
	
	КонвертXML = СтрЗаменить(КонвертXML, "%BinarySecurityToken%", СертификатКриптографииBase64);
	КонвертXML = СтрЗаменить(КонвертXML, "%SignatureMethod%", ВыбранныйАлгоритмПодписи);
	КонвертXML = СтрЗаменить(КонвертXML, "%DigestMethod%",    ВыбранныйАлгоритмХеширования);	
	
	// Канонизируем MessageData
	XPath_MessageData = "(//. | //@* | //namespace::*)[ancestor-or-self::*[local-name()='MessageData']]";
	ТекстОшибки = "Не удалось выполнить канонизирование блока MessageData!";
	
	Попытка
		КанонизированныйТекстXMLMessageData = КомпонентаКриптографии.C14N(КонвертXML, XPath_MessageData);
		КанонизированныйТекстXMLMessageData = КомпонентаКриптографии.TransformSMEV(КанонизированныйТекстXMLMessageData);
	Исключение
		Сообщить(ТекстОшибки + " " + ОписаниеОшибки());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если КанонизированныйТекстXMLMessageData = Неопределено Тогда
		LastError = КомпонентаКриптографии.GetLastError();
		Сообщить(ТекстОшибки + " " + LastError);
		ВызватьИсключение LastError;
	КонецЕсли;
	
	// Хешируем MessageData
	OIDАлгоритмаХеширования = "1.2.643.7.1.1.2.2";
	ТипКриптопровайдера  	= 80;
	ТекстОшибки = "Не удалось выполнить хеширование блока MessageData!";
	
	Попытка
		АтрибутDigestValue = КомпонентаКриптографии.Hash(КанонизированныйТекстXMLMessageData, OIDАлгоритмаХеширования, ТипКриптопровайдера);
	Исключение
		Сообщить(ТекстОшибки + " " + ОписаниеОшибки());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если АтрибутDigestValue = Неопределено Тогда
		LastError = КомпонентаКриптографии.GetLastError();
		Сообщить(ТекстОшибки + " " + LastError);
		ВызватьИсключение LastError;
	КонецЕсли;
	
	КонвертXML = СтрЗаменить(КонвертXML, "%DigestValue%", АтрибутDigestValue);
	
	// Канонизируем SignedInfo
	XPath_SignedInfo = "(//. | //@* | //namespace::*)[ancestor-or-self::*[local-name()='SignedInfo']]";
	ТекстОшибки = "Не удалось выполнить канонизирование блока SignedInfo!";
	
	Попытка
		КанонизированныйТекстXMLSignedInfo = КомпонентаКриптографии.C14N(КонвертXML, XPath_SignedInfo);
	Исключение
		Сообщить(ТекстОшибки + " " + ОписаниеОшибки());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если КанонизированныйТекстXMLSignedInfo = Неопределено Тогда
		LastError = КомпонентаКриптографии.GetLastError();
		Сообщить(ТекстОшибки + " " + LastError);
		ВызватьИсключение LastError;
	КонецЕсли;
	
	// Подписываем SignedInfo
	ПарольДоступаКЗакрытомуКлючу = МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу;
	ТекстОшибки = "Не удалось выполнить подписание блока SignedInfo!";
	
	Попытка
		АтрибутSignatureValue = КомпонентаКриптографии.Sign(КанонизированныйТекстXMLSignedInfo, СертификатКриптографииBase64, ПарольДоступаКЗакрытомуКлючу);
	Исключение
		Сообщить(ТекстОшибки + " " + ОписаниеОшибки());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если АтрибутSignatureValue = Неопределено Тогда
		LastError = КомпонентаКриптографии.GetLastError();
		Сообщить(ТекстОшибки + " " + LastError);
		ВызватьИсключение LastError;
	КонецЕсли;
	
	КонвертXML = СтрЗаменить(КонвертXML, "%SignatureValue%", АтрибутSignatureValue);
	
КонецПроцедуры

Функция СертификатПоОтпечатку(ОтпечатокСертификата = Неопределено, МенеджерКриптографии)
	
	двОтпечаток = ПолучитьДвоичныеДанныеИзHEXСтроки(ОтпечатокСертификата);
	
	Сертификат = Неопределено;
	Попытка
		Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
		Сертификат = Хранилище.НайтиПоОтпечатку(двОтпечаток);
	Исключение
		ИСМП.СообщОшибка("ИСМП.ПолучитьСертификат(): " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Сертификат;
	
КонецФункции

Функция СертификатКриптографииBase64(ДанныеСертификата)
	
	СтрокаBase64 = Base64Строка(ДанныеСертификата);
	
	СтрокаBase64 = СтрЗаменить(СтрокаBase64,Символы.Таб,"");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64,Символы.ПС,"");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64,Символы.ВК,"");
	
	Возврат СтрокаBase64;
	
КонецФункции

Функция ПодключитьКомпонентуПоИдентификатору(Знач Идентификатор, Знач Местоположение)
	
	Результат = Новый Структура;
	Результат.Вставить("Подключено", Ложь);
	Результат.Вставить("ПодключаемыйМодуль", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	
	макет = ПолучитьМакет(Местоположение);
	адрес = ПоместитьВоВременноеХранилище(макет);
	ПодключениеВыполнено = ПодключитьВнешнююКомпоненту(адрес, Идентификатор + "SymbolicName", ТипВнешнейКомпоненты.Native);
	
	Если Не ПодключениеВыполнено Тогда
		Результат.ОписаниеОшибки = "Не удалось подключить внешнюю компоненту ""%1"" на сервере по причине:
		|Метод ПодключитьВнешнююКомпоненту вернул Ложь.'";
		
		ЗаписьЖурналаРегистрации("Подключение внешней компоненты на сервере'",УровеньЖурналаРегистрации.Ошибка,,, Результат.ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;	
	
	
	ПодключаемыйМодуль = Неопределено;
	Попытка
		ПодключаемыйМодуль = Новый("AddIn." + Идентификатор + "SymbolicName" + "." + Идентификатор);
		Если ПодключаемыйМодуль = Неопределено Тогда 
			ВызватьИсключение НСтр("ru = 'Оператор Новый вернул Неопределено'");
		КонецЕсли;
	Исключение
		ПодключаемыйМодуль = Неопределено;
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ПодключаемыйМодуль = Неопределено Тогда
		Результат.ОписаниеОшибки = "Не удалось создать объект внешней компоненты ""%1"", подключенной на сервере, по причине:
		|"+ТекстОшибки;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Подключение внешней компоненты на сервере'", ),
		УровеньЖурналаРегистрации.Ошибка,,, Результат.ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Подключено = Истина;
	Результат.ПодключаемыйМодуль = ПодключаемыйМодуль;
	Возврат Результат;
	
КонецФункции

Функция ФорматироватьXML(ТекстСообщенияXML)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ПараметрыФорматирования = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Ложь, Ложь, " ");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ПараметрыФорматирования);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Константы

Функция GpbTarget()
	
	// Цель использования партии зерна или партии продуктов переработки зерна
	
	//<dict:LotsTarget code="2" name="Кормовые" startDate="2000-01-01T00:00"/>
	//<dict:LotsTarget code="1" name="Пищевые" startDate="2000-01-01T00:00"/>
	
	Возврат 1;
	
КонецФункции

Функция GpbPurpose()
	
	// Назначение партии зерна
	
	//<dict:LotsPurposeType code="3" name="Ввоз на территорию РФ" startDate="2000-01-01T00:00"/>
	//<dict:LotsPurposeType code="4" name="Вывоз с территории РФ" startDate="2000-01-01T00:00"/>
	//<dict:LotsPurposeType code="2" name="Переработка" startDate="2000-01-01T00:00"/>
	//<dict:LotsPurposeType code="1" name="Хранение и (или) обработка" startDate="2000-01-01T00:00"/>
	
	Возврат 1;
	
КонецФункции

Функция СтатусЗадачаОжидание()
	Возврат 0;
КонецФункции

Функция СтатусЗадачаВРаботе()
	Возврат 1;
КонецФункции

Функция СтатусЗадачаВыполнена()
	Возврат 2;
КонецФункции

Функция СтатусЗадачаОшибка()
	Возврат 3;
КонецФункции

Функция СтатусПодписан()
	Возврат "SUBSCRIBED"; // Можно использовать в СДИЗ
КонецФункции

Функция СтатусЗаблокирован()
	Возврат "BLOCKED"; // Указана в СДИЗ
КонецФункции

Функция СтатусВАрхиве()
	Возврат "IN_ARCHIVE"; // Партия полностью использована
КонецФункции

Функция СтатусАннулирован()
	Возврат "CANCELED";
КонецФункции

Функция СписокДопустимыхСтатусовДокументов()
	
	// Для изменения списка статусов раскомментировать строки
	
	СтатусыДокументов = Новый ТаблицаЗначений;
	СтатусыДокументов.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСтатусДокумента"));
	СтатусыДокументов.Колонки.Добавить("Номер",  Новый ОписаниеТипов("Число"));
	
	//НоваяСтрока = СтатусыДокументов.Добавить();
	//НоваяСтрока.Статус 	= Перечисления.ВидыСтатусДокумента.Новый;
	//НоваяСтрока.Номер 	= 1;
	//
	//НоваяСтрока = СтатусыДокументов.Добавить();
	//НоваяСтрока.Статус 	= Перечисления.ВидыСтатусДокумента.Подготовлен;
	//НоваяСтрока.Номер 	= 2;
	//
	//НоваяСтрока = СтатусыДокументов.Добавить();
	//НоваяСтрока.Статус 	= Перечисления.ВидыСтатусДокумента.Утвержден;
	//НоваяСтрока.Номер 	= 3;
	//
	//НоваяСтрока = СтатусыДокументов.Добавить();
	//НоваяСтрока.Статус 	= Перечисления.ВидыСтатусДокумента.На_Складе;
	//НоваяСтрока.Номер 	= 4;
	//
	//НоваяСтрока = СтатусыДокументов.Добавить();
	//НоваяСтрока.Статус 	= Перечисления.ВидыСтатусДокумента.Отборка;
	//НоваяСтрока.Номер 	= 5;
	//
	НоваяСтрока = СтатусыДокументов.Добавить();
	НоваяСтрока.Статус 	= Перечисления.ВидыСтатусДокумента.Отобран;
	НоваяСтрока.Номер 	= 6;
	
	НоваяСтрока = СтатусыДокументов.Добавить();
	НоваяСтрока.Статус 	= Перечисления.ВидыСтатусДокумента.На_Контроле;
	НоваяСтрока.Номер 	= 7;
	
	НоваяСтрока = СтатусыДокументов.Добавить();
	НоваяСтрока.Статус 	= Перечисления.ВидыСтатусДокумента.Отобран_Проверен;
	НоваяСтрока.Номер 	= 8;
	
	НоваяСтрока = СтатусыДокументов.Добавить();
	НоваяСтрока.Статус 	= Перечисления.ВидыСтатусДокумента.Выдан;
	НоваяСтрока.Номер 	= 9;
	
	НоваяСтрока = СтатусыДокументов.Добавить();
	НоваяСтрока.Статус 	= Перечисления.ВидыСтатусДокумента.Архив;
	НоваяСтрока.Номер 	= 10;
	
	Возврат СтатусыДокументов.ВыгрузитьКолонку("Статус");
	
КонецФункции

Функция ПервыйСтатус()
	
	// Начиная с этого статуса по документу создаются задачи на СДИЗ
	
	Возврат Перечисления.ВидыСтатусДокумента.Отобран;
	
КонецФункции

Функция ВремяОжиданияУпаковочныхЛистов()
	Возврат 2*60*60; // 2ч
КонецФункции

Функция МаксимальноеКоличествоПопытокОбработкиЗадачи()
	Возврат 1;
КонецФункции

#КонецОбласти

#Область ЗаполнениеСДИЗ

Функция ПараметрыСозданияСДИЗ(ЗадачаСДИЗ)
	
	Результат = Новый Структура("Параметры, ТекстОшибки");
	
	ДокументРН = ЗадачаСДИЗ.УПД;
	
	OperationSDIZ = Новый Массив;
	OperationSDIZ.Добавить("REALIZATION");
	
	ДопИнфо = ДополнительнаяИнформацияДокумента(ДокументРН);
	Contract = Новый Структура("Date, Number", ДопИнфо.ContractDate, ДопИнфо.ContractNumber);
	KindDoc = 4; // УПД
	ConfirmingDocument = Новый Структура("KindDoc, Date, Number", KindDoc, ДокументРН.Дата, ДокументРН.Номер);
	
	DeclarationOfConformit = ДекларацияОСоответствии(ЗадачаСДИЗ);
	Если НЕ ЗначениеЗаполнено(DeclarationOfConformit) Тогда
		Результат.ТекстОшибки = "Не найдена декларация о соответствии.";
		Возврат Результат;
	КонецЕсли;
	
	Content = ПолучитьXmlTorg12Content(ДокументРН);
	
	Seller = СтруктураКонтрагента(Content.Seller);
	Если Seller.Свойство("ТекстОшибки") Тогда
		Результат.ТекстОшибки = Seller.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	Seller.KPP = "272301001"; // Ставим КПП продавца такой же, как в системе
	
	Buyer = СтруктураКонтрагента(Content.Buyer);
	Если Buyer.Свойство("ТекстОшибки") Тогда
		Результат.ТекстОшибки = Buyer.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Realization = Новый Структура();
	Realization.Вставить("Seller", Seller);
	Realization.Вставить("Buyer", Buyer);
	Realization.Вставить("Contract", Contract);
	Realization.Вставить("ConfirmingDocument", ConfirmingDocument);
	
	Shipping = Неопределено;
	
	Если НЕ ДокументРН.СамоВывоз Тогда
		
		OperationSDIZ.Добавить("SHIPPING");
		
		Shipper = Seller;
		Consignee = СтруктураКонтрагента(Content.Consignee, Истина);
		Если Consignee.Свойство("ТекстОшибки") Тогда
			Результат.ТекстОшибки = Consignee.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		ConsigneeAddress = СокрЛП(ОбщегоНазначения.строкаАдрес(Справочники.ТипыАдресов.АдресДоставки, ДокументРН.Отдел,,Истина));
		ОбработатьАдрес(ConsigneeAddress);
		Если НЕ ЗначениеЗаполнено(ConsigneeAddress) Тогда
			ConsigneeAddress = Consignee.Address;
		КонецЕсли;
		
		TransportInfo = Новый Структура("TransportCode, numberTransport, NumberContainer", "2", ДопИнфо.NumberTransport, "");
		Carrier = Seller;
		CarrierBlock = Новый Структура("TransportInfo, Carrier", TransportInfo, Carrier);
		
		Shipping = Новый Структура();
		Shipping.Вставить("Shipper", Shipper);
		Shipping.Вставить("ShipperAddress", Shipper.Address);
		Shipping.Вставить("Consignee", Consignee);
		Shipping.Вставить("ConsigneeAddress", ConsigneeAddress);
		Shipping.Вставить("CarrierBlock", CarrierBlock);
		
	КонецЕсли;
	
	Параметры = Новый Структура();
	Параметры.Вставить("OperationSDIZ", OperationSDIZ);
	Параметры.Вставить("Realization", Realization);
	Параметры.Вставить("Shipping", Shipping);
	Параметры.Вставить("DeclarationOfConformit", DeclarationOfConformit);
	
	Результат.Параметры = Параметры;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьOrganization(Контрагент)
	
	ОбъектAddressRF = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "AddressRFType"));
	ОбъектAddressRF.Address = Контрагент.Address;
	
	Если Контрагент.ЭтоИП Тогда
		
		ОбъектSoleProprietor = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "SoleProprietorType"));
		ЗаполнитьЗначенияСвойств(ОбъектSoleProprietor, Контрагент,, "Address");
		ОбъектSoleProprietor.Address = ОбъектAddressRF;
		
		Subject = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "SubjectType"));
		Subject.SoleProprietor = ОбъектSoleProprietor;
		
	Иначе
		
		ОбъектLegalEntity = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "LegalEntityType"));
		ЗаполнитьЗначенияСвойств(ОбъектLegalEntity, Контрагент,, "Address");
		ОбъектLegalEntity.Address = ОбъектAddressRF;
		
		Subject = Фабрика.Создать(Фабрика.Тип(СоответствиеПространствИмен.Получить("organizations"), "SubjectType"));
		Subject.LegalEntity = ОбъектLegalEntity;
		
	КонецЕсли;
	
	Возврат Subject;
	
КонецФункции

Функция ДополнительнаяИнформацияДокумента(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходнаяНал.Ссылка КАК Документ
	|ПОМЕСТИТЬ ВТ_РН
	|ИЗ
	|	Документ.РасходнаяНал КАК РасходнаяНал
	|ГДЕ
	|	РасходнаяНал.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоставкаТабличнаяЧасть.Док КАК Документ,
	|	ДоставкаТабличнаяЧасть.Ссылка.Машина.ГосНомер КАК МашинаГосНомер
	|ПОМЕСТИТЬ ВТ_Доставка
	|ИЗ
	|	Документ.Доставка.ТабличнаяЧасть КАК ДоставкаТабличнаяЧасть
	|ГДЕ
	|	ДоставкаТабличнаяЧасть.Ссылка.Проведен
	|	И ДоставкаТабличнаяЧасть.Док = &Документ
	|	И НЕ ДоставкаТабличнаяЧасть.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусДоставки.НеДоставленБудетРасформирован), ЗНАЧЕНИЕ(Перечисление.СтатусДоставки.НеДоставленБудетДоставленПозднее))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоставкаТабличнаяЧасть.Ссылка.Дата УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РН.Документ КАК Документ,
	|	ЕСТЬNULL(ВТ_Доставка.МашинаГосНомер, ЕСТЬNULL(ДополнительныеСведенияНомерМашины.Значение, """")) КАК МашинаГосНомер,
	|	ВТ_РН.Документ.Договор.Наименование КАК ДоговорНомер,
	|	ВТ_РН.Документ.Договор.ДатаДоговора КАК ДоговорДата
	|ИЗ
	|	ВТ_РН КАК ВТ_РН
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Доставка КАК ВТ_Доставка
	|		ПО ВТ_РН.Документ = ВТ_Доставка.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведенияНомерМашины
	|		ПО ВТ_РН.Документ.Фирма = ДополнительныеСведенияНомерМашины.Объект
	|			И (ДополнительныеСведенияНомерМашины.Свойство.Наименование = ""Зерно_НомерМашиныПоУмолчанию"")";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура();
	Результат.Вставить("ContractDate", Выборка.ДоговорДата);
	Результат.Вставить("ContractNumber", Выборка.ДоговорНомер);
	Результат.Вставить("NumberTransport", Выборка.МашинаГосНомер);
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураКонтрагента(Контрагент, ЭтоConsignee = Ложь)
	
	Если ТипЗнч(Контрагент.Ссылка) = Тип("СправочникСсылка.ЮрЛица") Тогда
		ЮрЛицо = Контрагент.Ссылка;
	ИначеЕсли ТипЗнч(Контрагент.Ссылка) = Тип("СправочникСсылка.Фирмы") Тогда
		ЮрЛицо = Контрагент.Ссылка.ЮрЛицо;
	КонецЕсли;
	
	ОКОПФ = ЮрЛицо.ОКОПФ;
	ИмяИП = "";
	
	Если (НЕ ЗначениеЗаполнено(ОКОПФ) ИЛИ ЭтоConsignee) И // Грузополучатель может быть ИП при ЮрЛицо.ОКОПФ <> ИП
		(Прав(Контрагент.Name, 3) = " ИП" ИЛИ Лев(Контрагент.Name, 3) = "ИП "
		ИЛИ СтрНайти(НРег(Контрагент.Name), "индивидуальный предприниматель") <> 0) Тогда // Это ИП
		ОКОПФ = Справочники.КлассификаторОКОПФ.НайтиПоНаименованию("ИП", Истина);
		ИмяИП = Контрагент.Name;
	КонецЕсли;
	
	ЭтоИП = ОКОПФ.Наименование = "ИП";
	
	НетShortName = ЭтоConsignee И НЕ ЭтоИП;
	
	Результат = Новый Структура;
	Результат.Вставить("OKOPF", СокрЛП(ОКОПФ.НаименованиеПолное));
	Результат.Вставить("ЭтоИП", ЭтоИП);
	Результат.Вставить("INN", СокрЛП(Контрагент.Inn));
	Результат.Вставить("KPP", СокрЛП(Контрагент.Kpp));
	Результат.Вставить("OGRN", СокрЛП(ЮрЛицо.ОГРН));
	
	Результат.Вставить("Name", Контрагент.Name);
	Результат.Вставить("ShortName", ?(НетShortName, Результат.Name, ЮрЛицо.Наименование));
	
	Если ЭтоИП Тогда
		Результат.ShortName = Результат.Name;
	КонецЕсли;
	
	AddressText = Контрагент.Address.AddressText;
	ОбработатьАдрес(AddressText);
	Результат.Вставить("Address", AddressText);
	
	Результат.Вставить("FirstName", "");
	Результат.Вставить("FamilyName", "");
	
	Если ЭтоИП Тогда
		
		// Формируем ФИО раздельно
		Ответ = РазобратьФИО(ЮрЛицо, ИмяИП);
		
		Если Ответ.Свойство("Успешно") И Ответ.Успешно ТОгда
			Результат.FirstName = Ответ.Имя;
			Результат.FamilyName = Ответ.Фамилия;
			Если ЗначениеЗаполнено(Ответ.Отчество) Тогда
				Результат.Вставить("Patronymic", Ответ.Отчество);
			КонецЕсли;
		Иначе
			ТекстОшибки = "Не удалось распарсить на ФИО юрлицо "+?(ИмяИП <> "", ИмяИП,
			ЮрЛицо.Наименование + " (ИНН "+ЮрЛицо.ИНН+")");
			ВызватьИсключение ТекстОшибки;			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстОшибки = ПроверитьЗаполнениеПолей(Результат, ЭтоИП, ЭтоConsignee);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Результат.Вставить("ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПолноеНаименование(ЮрЛицо)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ЮрЛицо);
	Запрос.УстановитьПараметр("выбДата", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПолноеНаименованиеСрезПоследних.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.ПолноеНаименование.СрезПоследних(&выбДата, Объект = &Объект) КАК ПолноеНаименованиеСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Наименование;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ОбработатьАдрес(Адрес)
	
	// Удаляем индекс из адреса
	
	ПерваяЗапятая = СтрНайти(Адрес, ",");
	
	Если ПерваяЗапятая <> 0 Тогда
		
		АдресМассив = СтрРазделить(Адрес, ",");
		ЕстьИндекс = Ложь;
		
		Попытка
			Р = Число(АдресМассив[0]);
			ЕстьИндекс = Истина;
		Исключение
		КонецПопытки;
		
		Если ЕстьИндекс Тогда
			Адрес = СокрЛП(Сред(Адрес, ПерваяЗапятая+1));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

pageLength = 100;
ОсновнаяФирма = Константы.ОсновнаяФирма.Получить();
ЭтоКЦ = ОбщегоНазначения.ТекущаяИБЦентральная();

#КонецОбласти